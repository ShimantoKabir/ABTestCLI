(()=>{"use strict";var t={151:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.firstFromDisclaimerLink=e.hubSpotLibrary=e.formBgLink=e.selectors=void 0,e.selectors={freeOrderBtn:"div.hhs-rich-text>div.hhs-col-inner>p>span>a",firstFormDisclaimer:"div.first-form>div.hbspt-form>form>div.legal-consent-container>div.hs-richtext>p"},e.formBgLink="https://brainlabs.digital/cro/classicindustries/ci003/form-bg.jpg",e.hubSpotLibrary={js:"https://js.hsforms.net/forms/embed/v2.js"},e.firstFromDisclaimerLink="https://help.classicindustries.com/en/classic-industries-privacy-policy"},771:(t,e)=>{var n;Object.defineProperty(e,"__esModule",{value:!0}),e.TestInfo=void 0,(n=e.TestInfo||(e.TestInfo={})).ID="CI003",n.SITE="classicindustries",n.TITLE="7.1_VLP_Catalog Download_PopUpForm",n.CLIENT="brainlab",n.TARGET="https://shop.classicindustries.com/lp/1958-1996_chevrolet_impala_and_full_size_chevrolet_parts",n.VARIATION="1"},366:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MainComponent=void 0;var o=n(951),i=n(151),r=n(771),s=n(918),c=n(501);e.MainComponent=function(){var t=this;this.overlayComponent=new c.OverlayComponent,this.init=function(){(new s.Loader).load(i.hubSpotLibrary.js,"hub-spot-js","script").then((function(e){console.log("Hubspot library loaded......!"),t.checkHubSpotObject()}))},this.checkHubSpotObject=function(){"object"==typeof hbspt?(console.log("Hubspot object initialize......!"),t.applyModification()):setTimeout((function(){t.checkHubSpotObject()}),500)},this.applyModification=function(){var e=document.querySelector(i.selectors.freeOrderBtn);t.overlayComponent.render();var n=document.querySelector("div.overlay-component");e&&n&&e.addEventListener("click",(function(t){t.preventDefault(),n.classList.add("show")}))},o.Initializer.init(r.TestInfo,"0.0.2")}},501:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OverlayComponent=void 0;var o=n(151);e.OverlayComponent=function(){var t=this;this.getHtml=function(){return'\n      <div class="overlay-component" >\n        <div class="component-wrap" >\n          <div class="catalog" >\n            <div class="catalog-overlay" >\n              <div class="overlay-image" >\n                <img src="'.concat(o.formBgLink,'" >\n              </div>\n              <div class="overlay-body" >\n              </div>\n            </div>\n            <div class="main first-form" >\n              <div class="heading" >\n                <h6>FREE RESTORATION AND PERFORMANCE PARTS CATALOG</h6>\n              </div>\n            </div>\n            <div class="main second-form" >\n              <div class="heading" >\n                <h6>FREE RESTORATION AND PERFORMANCE PARTS CATALOG</h6>\n              </div>\n            </div>\n            <div class="main no-form show" >\n              <div class="heading" >\n                <h6>Purchase or Download your Impala & Full Size Chevy Parts Catalog</h6>\n              </div>\n              <div class="description" >\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Description</th>\n                      <th>Price</th>\n                      <th>Qty</th>\n                      <th></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>Download the Catalog</td>\n                      <td>FREE</td>\n                      <td></td>\n                      <td><button class="first-download" >Download</button></td>\n                    </tr>\n                    <tr>\n                      <td>Delivery - U.S. 4th Class (contiguous 48 states only) Note: Catalog will arrive in approximately 2-4 weeks</td>\n                      <td>Free</td>\n                      <td><input type="text" ></td>\n                      <td><button class="second-download" >Download</button></td>\n                    </tr>\n                    <tr>\n                      <td>Delivery - U.S. 1st Class & HI, AK, PR, Guam</td>\n                      <td>$20.00</td>\n                      <td><input type="text" ></td>\n                      <td><button class="second-download" >Download</button></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ').trim()},this.loadFirstFormScript=function(){return'\n      <script defer>\n        hbspt.forms.create({\n          region: "na1",\n          portalId: "521369",\n          formId: "dcdaff52-9b18-4baa-b231-1865c29fe3a1"\n        });\n      <\/script>\n    '.trim()},this.loadSecondFormScript=function(){return'\n      <script defer>\n        hbspt.forms.create({\n          region: "na1",\n          portalId: "521369",\n          formId: "bcf2e44d-2295-44bd-b20c-534c52c47980"\n        });\n      <\/script>\n    '.trim()},this.render=function(){document.body.insertAdjacentHTML("afterbegin",t.getHtml()),setTimeout((function(){hbspt.forms.create({region:"na1",portalId:"521369",formId:"dcdaff52-9b18-4baa-b231-1865c29fe3a1"}),hbspt.forms.create({region:"na1",portalId:"521369",formId:"bcf2e44d-2295-44bd-b20c-534c52c47980"}),t.findForm()}),500)},this.findForm=function(){var e=document.querySelectorAll("div.hbspt-form"),n=document.querySelector("div.main.first-form"),o=document.querySelector("div.main.second-form");0===e[0].childElementCount?setTimeout((function(){t.findForm()}),500):(console.log("Found from...!"),e.forEach((function(t,e){if(t.firstChild&&"FORM"===t.firstChild.nodeName){var i=t.cloneNode(!0);n&&n.insertAdjacentElement("beforeend",i),t.remove(),console.log("First form moved....!")}else{var r=t.cloneNode(!0);o&&o.insertAdjacentElement("beforeend",r),console.log("Second form moved....!"),t.remove()}})),n&&o&&t.addListener(n,o))},this.changeFirstFormDisclaimer=function(){var e=document.querySelector(o.selectors.firstFormDisclaimer);e?(console.log("Disclaimer found...!"),e.textContent="",e.insertAdjacentHTML("afterbegin",'Classic Industries needs the contact information you provide to us to contact you about our products and services. You may unsubscribe from these communications at anytime. For information, check out our <a href="'.concat(o.firstFromDisclaimerLink,'" >Privacy Policy</a>.'))):setTimeout((function(){t.changeFirstFormDisclaimer()}),500)},this.addListener=function(e,n){var o=document.querySelectorAll("div.main"),i=document.querySelector("button.first-download"),r=document.querySelectorAll("button.second-download");i&&r&&0!==r.length&&o&&0!==o.length&&e&&n&&(i.addEventListener("click",(function(){t.hideOtherMain(o),e.classList.add("show")})),r.forEach((function(e){e.addEventListener("click",(function(){t.hideOtherMain(o),n.classList.add("show")}))})),t.changeFirstFormDisclaimer())},this.hideOtherMain=function(t){t.forEach((function(t){t.classList.remove("show")}))}}},918:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;e.Loader=function(){this.load=function(t,e,n){var o=document.createElement(n);return"script"===n?o.setAttribute("src",t):o.setAttribute("href",t),"link"===n&&o.setAttribute("rel","stylesheet"),o.setAttribute("id",e),document.head.appendChild(o),new Promise((function(t,o){setTimeout((function(){var i=document.querySelector("".concat(n,"#")+e);i?t(i):o(null)}),1e3)}))}}},951:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Initializer=void 0;var n=function(){function t(){}return t.init=function(t,e){document.documentElement.classList.add(t.ID),document.documentElement.classList.add("".concat(t.ID,"-").concat(t.VARIATION)),console.info("ID: ".concat(t.ID,", VARIATION: ").concat(t.VARIATION,", VERSION: ").concat(e," is running.....!"))},t}();e.Initializer=n},454:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Poller=void 0;var o=n(704);e.Poller=function(){var t=this;this.options=null,this.timeout=null,this.successfulConditions=[],this.callback=function(){},this.conditionsLength=0,this.poll=function(e,n,i){t.callback=n,t.options=new o.UserOptions,t.conditionsLength=e.length,i&&(t.options=i),t.timeout=t.options.timeout?new Date(t.getNow()+t.options.timeout).getTime():null;for(var r=0;r<e.length;r++)t.pollForCondition(e[r],t.options.wait,!0,t.options.multiplier)},this.getNow=function(){return(new Date).getTime()},this.isTimeOut=function(){return!!(t.timeout&&t.getNow()>t.timeout)},this.evaluateCondition=function(t){return!!t&&("function"==typeof t?t():!("string"!=typeof t||!document.querySelector(t)))},this.isAllConditionPassed=function(){return t.conditionsLength===t.successfulConditions.length},this.pollForCondition=function(e,n,o,i){if(t.timeout&&t.isTimeOut())return!1;var r=t.evaluateCondition(e);return r?(t.successfulConditions.push(r),t.isAllConditionPassed()&&t.callback(t.successfulConditions)):setTimeout((function(){t.pollForCondition(e,n*i,o,i)}),o?0:n),!0}}},704:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.UserOptions=void 0;e.UserOptions=function(){this.wait=50,this.multiplier=1.1,this.timeout=0}}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o](r,r.exports,n),r.exports}(()=>{var t=n(454),e=n(151),o=n(366);if(!/MSIE|Trident|Edge\/(12|13|14|15|16|17|18)/.test(window.navigator.userAgent)){var i=new o.MainComponent;(new t.Poller).poll(["body",e.selectors.freeOrderBtn],i.init)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,