(()=>{"use strict";var e={279:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.TestInfo=void 0,(n=t.TestInfo||(t.TestInfo={})).ID="CC028",n.SITE="consumercellular",n.TITLE="XT11.2 - subtext on byod",n.CLIENT="brainlab",n.TARGET="https://www.consumercellular.com/shopping/details/sim/details",n.VARIATION="1"},384:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MainComponent=void 0;var o=n(951),i=n(279),s=n(891),r=n(348);t.MainComponent=function(){var e=this;this.isHeadlineFound=!1,this.init=function(){s.LocationObserver.listen((function(t){e.isHeadlineFound=!1})),new r.TestObserver("body").observe((function(t){for(var n=0;n<t.length;n++){var o=document.querySelector("span.device-name");!e.isHeadlineFound&&o&&(e.applyModification(o),e.isHeadlineFound=!0)}}))},this.applyModification=function(e){document.querySelector("p.sub-text")||e.insertAdjacentHTML("afterend",'<p class="sub-text" >No new device payments. no activation fee. no contracts.</p>')},o.Initializer.init(i.TestInfo,"0.0.1")}},891:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LocationObserver=void 0;var o=n(348),i=function(){function e(){}var t;return t=e,e.previousPathname="",e.listen=function(e){new o.TestObserver("body").observe((function(n){location.pathname!==t.previousPathname&&(t.previousPathname=location.pathname,e(location.pathname))}))},e}();t.LocationObserver=i},348:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TestObserver=void 0;t.TestObserver=function(e){var t=this;this.targetNode=null,this.config={},this.observe=function(e){var n=new MutationObserver(e);return n.observe(t.targetNode,t.config),n},this.targetNode=document.querySelector(e),this.config={childList:!0,subtree:!0,characterData:!0}}},951:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Initializer=void 0;var n=function(){function e(){}return e.init=function(e,t){document.documentElement.classList.add(e.ID),document.documentElement.classList.add("".concat(e.ID,"-").concat(e.VARIATION)),console.info("ID: ".concat(e.ID,", VARIATION: ").concat(e.VARIATION,", VERSION: ").concat(t," is running.....!"))},e}();t.Initializer=n},454:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Poller=void 0;var o=n(704);t.Poller=function(){var e=this;this.options=null,this.timeout=null,this.successfulConditions=[],this.callback=function(){},this.conditionsLength=0,this.poll=function(t,n,i){e.callback=n,e.options=new o.UserOptions,e.conditionsLength=t.length,i&&(e.options=i),e.timeout=e.options.timeout?new Date(e.getNow()+e.options.timeout).getTime():null;for(var s=0;s<t.length;s++)e.pollForCondition(t[s],e.options.wait,!0,e.options.multiplier)},this.getNow=function(){return(new Date).getTime()},this.isTimeOut=function(){return!!(e.timeout&&e.getNow()>e.timeout)},this.evaluateCondition=function(e){return!!e&&("function"==typeof e?e():!("string"!=typeof e||!document.querySelector(e)))},this.isAllConditionPassed=function(){return e.conditionsLength===e.successfulConditions.length},this.pollForCondition=function(t,n,o,i){if(e.timeout&&e.isTimeOut())return!1;var s=e.evaluateCondition(t);return s?(e.successfulConditions.push(s),e.isAllConditionPassed()&&e.callback(e.successfulConditions)):setTimeout((function(){e.pollForCondition(t,n*i,o,i)}),o?0:n),!0}}},704:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UserOptions=void 0;t.UserOptions=function(){this.wait=50,this.multiplier=1.1,this.timeout=0}}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,n),s.exports}(()=>{var e=n(454),t=n(384);if(!/MSIE|Trident|Edge\/(12|13|14|15|16|17|18)/.test(window.navigator.userAgent)){var o=new t.MainComponent;(new e.Poller).poll(["body"],o.init)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,