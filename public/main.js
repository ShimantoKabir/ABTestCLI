(()=>{"use strict";var e={446:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.emailRegularExpression=n.skipForNowLink=n.heroImageLinks=n.cities=n.imgLinks=n.swiperLibrary=n.triggerEvent=n.leftArrowSvg=n.rightArrowSvg=n.selectors=void 0,n.selectors={hero:"main#content>div:first-child>div:first-child",header:"header.header"},n.rightArrowSvg='\n<svg width="23" height="48" viewBox="0 0 23 48" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M2 46L18.7973 25.6665C20.0621 24.1353 20.012 21.908 18.6796 20.4353L2 2" stroke="#01426A" stroke-width="5"/>\n</svg>\n',n.leftArrowSvg='\n<svg width="23" height="48" viewBox="0 0 23 48" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M21 2L4.20274 22.3335C2.93788 23.8647 2.98799 26.092 4.32045 27.5647L21 46" stroke="#01426A" stroke-width="5"/>\n</svg>\n',n.triggerEvent=function(e){window.optimizely=window.optimizely||[],window.optimizely.push({type:"event",eventName:e}),console.log("event-triggered=",e)},n.swiperLibrary={js:"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js",css:"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"},n.imgLinks=[{link:"https://brainlabs.digital/cro/sunsetter/ss007/1.jpg",serial:0},{link:"https://brainlabs.digital/cro/sunsetter/ss007/2.jpg",serial:1},{link:"https://brainlabs.digital/cro/sunsetter/ss007/3.jpg",serial:2},{link:"https://brainlabs.digital/cro/sunsetter/ss007/1.jpg",serial:0},{link:"https://brainlabs.digital/cro/sunsetter/ss007/2.jpg",serial:1},{link:"https://brainlabs.digital/cro/sunsetter/ss007/3.jpg",serial:2}],n.cities=[{key:"AL",value:"Alabama"},{key:"AZ",value:"Arizona"},{key:"AR",value:"Arkansas"},{key:"CA",value:"California"},{key:"CO",value:"Colorado"},{key:"CT",value:"Connecticut"},{key:"DC",value:"District of Columbia"},{key:"DE",value:"Delaware"},{key:"FL",value:"Florida"},{key:"GA",value:"Georgia"},{key:"HI",value:"Hawaii"},{key:"ID",value:"Idaho"},{key:"IL",value:"Illinois"},{key:"IN",value:"Indiana"},{key:"IA",value:"Iowa"},{key:"KS",value:"Kansas"},{key:"KY",value:"Kentucky"},{key:"LA",value:"Louisiana"},{key:"ME",value:"Maine"},{key:"MD",value:"Maryland"},{key:"MA",value:"Massachusetts"},{key:"MI",value:"Michigan"},{key:"MN",value:"Minnesota"},{key:"MS",value:"Mississippi"},{key:"MO",value:"Missouri"},{key:"MT",value:"Montana"},{key:"NE",value:"Nebraska"},{key:"NV",value:"Nevada"},{key:"NH",value:"New Hampshire"},{key:"NJ",value:"New Jersey"},{key:"NM",value:"New Mexico"},{key:"NY",value:"New York"},{key:"NC",value:"North Carolina"},{key:"ND",value:"North Dakota"},{key:"OH",value:"Ohio"},{key:"OK",value:"Oklahoma"},{key:"OR",value:"Oregon"},{key:"PA",value:"Pennsylvania"},{key:"RI",value:"Rhode Island"},{key:"SC",value:"South Carolina"},{key:"SD",value:"South Dakota"},{key:"TN",value:"Tennessee"},{key:"TX",value:"Texas"},{key:"UT",value:"Utah"},{key:"VT",value:"Vermont"},{key:"VA",value:"Virginia"},{key:"WA",value:"Washington"},{key:"WV",value:"West Virginia"},{key:"WI",value:"Wisconsin"},{key:"WY",value:"Wyoming"}],n.heroImageLinks=["https://brainlabs.digital/cro/sunsetter/ss007/hero-img-1.jpg","https://brainlabs.digital/cro/sunsetter/ss007/hero-img-2.jpg","https://brainlabs.digital/cro/sunsetter/ss007/hero-img-3.jpg"],n.skipForNowLink="https://www.sunsetter.com/cm/find-a-dealer/results",n.emailRegularExpression="^(([^<>()[]\\.,;:s@@&quot;]+(.[^<>()[]\\.,;:s@@&quot;]+)*)|(&quot;.+&quot;))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$"},523:(e,n)=>{var t;Object.defineProperty(n,"__esModule",{value:!0}),n.TestInfo=void 0,(t=n.TestInfo||(n.TestInfo={})).ID="SS007",t.SITE="sunsetter",t.TITLE="3.5 Form on Homepage",t.CLIENT="brainlab",t.TARGET="https://www.sunsetter.com",t.VARIATION="1"},906:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.CarouselComponent=void 0;var i=t(446);n.CarouselComponent=function(){var e=this;this.getSwiperSlideHtml=function(e,n){var t=0===n?"active":"";return'\n      <div class="swiper-slide carousel-item-'.concat(n,'">\n        <div class="image-card ').concat(t,'" serial="').concat(e.serial,'" >\n          <img src="').concat(e.link,'" >\n        </div>\n      </div>\n    ').trim()},this.getHtml=function(n){return'\n      <div class="carousel-component" >\n        <div class="component-wrap" >\n          <div class="swiper carousel">\n            <div class="swiper-wrapper">\n            '.concat(n.map((function(n,t){return e.getSwiperSlideHtml(n,t)})).join("\n"),'\n            </div>\n          </div>\n          <div class="carousel-controller" >\n            <div class="carousel-prev">\n              <div class="svg" >\n                ').concat(i.leftArrowSvg,'\n              </div>\n            </div>\n            <div class="carousel-next">\n              <div class="svg" >\n                ').concat(i.rightArrowSvg,"\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ").trim()},this.initSwiper=function(){"function"==typeof Swiper?(e.reactive(),console.log("Swiper initialize..!")):setTimeout((function(){e.initSwiper()}),250)},this.reactive=function(){return e.addImageListener(),new Swiper(".carousel",{slidesPerView:1,spaceBetween:10,autoplay:!1,navigation:{nextEl:".carousel-next",prevEl:".carousel-prev"},pagination:{el:".carousel-pagination"},mousewheel:!0,keyboard:!0,breakpoints:{420:{slidesPerView:1,spaceBetween:10},768:{slidesPerView:2,spaceBetween:10},1066:{slidesPerView:3,spaceBetween:10}},on:{slideChange:function(){(0,i.triggerEvent)("review-slide-change")}}})},this.addImageListener=function(){var n=document.querySelectorAll("div.image-card"),t=document.querySelectorAll("img.hero-image");n&&t&&0!==n.length&&0!==t.length&&n.forEach((function(i,o){i.addEventListener("click",(function(){e.removeActive(n,t),i.classList.add("active");var o=i.getAttribute("serial");o&&t[Number(o)].classList.add("active")}))}))},this.removeActive=function(e,n){e.forEach((function(e,n){e.classList.remove("active")})),n.forEach((function(e,n){e.classList.remove("active")}))}}},175:function(e,n,t){var i=this&&this.__awaiter||function(e,n,t,i){return new(t||(t=Promise))((function(o,a){function s(e){try{l(i.next(e))}catch(e){a(e)}}function r(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}l((i=i.apply(e,n||[])).next())}))},o=this&&this.__generator||function(e,n){var t,i,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(r){return function(l){return function(r){if(t)throw new TypeError("Generator is already executing.");for(;a&&(a=0,r[0]&&(s=0)),s;)try{if(t=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=n.call(e,s)}catch(e){r=[6,e],i=0}finally{t=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,l])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.FormComponent=void 0;var a=t(446);n.FormComponent=function(){var e=this;this.formComponent=null,this.errorMsg=null,this.getStepTwoFormHtml=function(){return'\n      <div class="component-wrap step-two" >\n        <div class="headline" >\n          <h3>Receive a FREE Information Kit along with Savings!</h3>\n        </div>\n        <form class="customer-form">\n          <div class="input-area" >\n            <div class="name" >\n              <label>Address</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="AddressLine1" \n                maxlength="40" \n                name="AddressLine1" \n                placeholder="Address 1" \n                type="text" \n                value=""\n              required>\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="name" >\n              <label>Address 2</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="AddressLine2" \n                maxlength="40" \n                name="AddressLine2" \n                placeholder="Address 2" \n                type="text" \n                value=""\n              required>\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="name" >\n              <label>City</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="City" \n                maxlength="30" \n                name="City" \n                placeholder="City" \n                type="text" \n                value=""\n              required>\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="input" >\n              <select id="State" name="State" required>\n                <option selected="selected" value="">Select State</option>\n                '.concat(a.cities.map((function(e){return'<option value="'.concat(e.key,'">').concat(e.value,"</option>")})).join("\n"),'\n              </select>\n            </div>\n          </div>\n          <div class="submit-area" >\n            <div class="cta" >\n              <button id="show-price-btn" >Find a Dealer</button>\n            </div>\n          </div>\n        </form>\n        <div class="form-footer" >\n          <div class="skip" >\n            <a href="').concat(a.skipForNowLink,'" >Skip for now</a>\n          </div>\n          <div class="footer-text" >\n            <p>Your contact information is kept confidential. We do not distribute it to outside sources. Read our <a href="/cm/privacy/" >privacy policy</a>.</p>\n          </div>\n        </div>\n      </div>\n    ').trim()},this.getStepOneFormHtml=function(){return'\n      <div class="component-wrap step-one" >\n        <div class="headline" >\n          <h3>Find an Authorized SunSetter Dealer Near You!</h3>\n        </div>\n        <form class="customer-form">\n          <div class="input-area" >\n            <div class="name" >\n              <label>First Name</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="FirstName" \n                maxlength="30" \n                name="FirstName" \n                placeholder="First Name" \n                type="text" \n                value=""\n              >\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="name" >\n              <label>Last Name</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="LastName" \n                maxlength="30" \n                name="LastName" \n                placeholder="Last Name" \n                type="text" value=""\n              >\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="name" >\n              <label>Email</label>\n            </div>\n            <div class="input" >\n              <input\n                autocomplete="on"\n                id="Email" \n                maxlength="128" \n                name="Email" \n                placeholder="Email" \n                type="email" value=""\n              >\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="check-box" >\n              <input \n                checked="checked" \n                id="ContactOptionId" \n                name="ContactOptionId" \n                type="checkbox" \n                value="true"\n              required>\n            </div>\n            <div class="check-box-label" >\n              <p>I would like to receive emails with special promotions from SunSetter.</p>\n            </div>\n          </div>\n          <div class="input-area-tex" >\n            <p>Enter your phone number for a FREE in-home consultation</p>\n          </div>\n          <div class="input-area" >\n            <div class="name" >\n              <label>Zip Code*</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="ZipCode" \n                maxlength="20" \n                name="ZipCode" \n                placeholder="Zip Code" \n                type="text" \n                value=""\n              required>\n            </div>\n          </div>\n          <div class="input-area" >\n            <div class="name" >\n              <label>Phone*</label>\n            </div>\n            <div class="input" >\n              <input \n                autocomplete="on" \n                id="Phone" \n                maxlength="128" \n                name="Phone" \n                placeholder="Phone" \n                type="text" \n                value=""\n              required>\n            </div>\n          </div>\n          <div class="submit-area" >\n            <div class="submit-area-text" >\n              <p><span>*</span> Required Fields</p>\n            </div>\n            <div class="cta" >\n              <button id="view-price-btn" >Find a Dealer</button>\n            </div>\n          </div>\n        </form>\n        <div class="form-footer" >\n          <div class="footer-text" >\n            <p>Your contact information is kept confidential. We do not distribute it to outside sources. Read our <a href="/cm/privacy/" >privacy policy</a>.</p>\n          </div>\n        </div>\n      </div>\n    '.trim()},this.getHtml=function(){return'\n      <div class="form-component" >\n        <div class="error-msg" >\n          <p>Something went wrong, please try again!</p>\n        </div>\n        '.concat(e.getStepOneFormHtml(),"\n        ").concat(e.getStepTwoFormHtml(),'\n        <div class="component-wrap success" >\n          <div class="success-wrap" >\n            <p>Form submitted successfully!<p>\n          </div>\n        </div>\n      </div>\n    ').trim()},this.active=function(){e.formComponent=document.querySelector("div.form-component"),e.errorMsg=document.querySelector("div.error-msg");var n=document.querySelector("div.form-component>div.component-wrap.step-one>form"),t=document.querySelector("div.form-component>div.component-wrap.step-two>form"),i=document.querySelector("button#view-price-btn"),o=document.querySelector("button#show-price-btn");i&&n&&o&&t&&(n.addEventListener("submit",(function(e){e.preventDefault(),console.log("step-one-form-prevent-default")})),t.addEventListener("submit",(function(e){e.preventDefault(),console.log("step-two-form-prevent-default")})),i.addEventListener("click",(function(){e.submitStepOneForm()})),o.addEventListener("click",(function(){e.submitStepTwoForm()})))},this.submitStepTwoForm=function(){var n=document.querySelector("input#AddressLine1"),t=document.querySelector("input#AddressLine2"),i=document.querySelector("input#City"),o=document.querySelector("select#State");n&&n.value&&t&&t.value&&i&&i.value&&o&&o.value&&e.submitFormData({addressLine1:n.value,addressLine2:t.value,city:i.value,state:o.value},2)},this.submitStepOneForm=function(){var n=document.querySelector("input#FirstName"),t=document.querySelector("input#LastName"),i=document.querySelector("input#Email"),o=document.querySelector("input#ContactOptionId"),a=document.querySelector("input#ZipCode"),s=document.querySelector("input#Phone");n&&t&&o&&i&&a&&a.value&&s&&s.value&&e.submitFormData({firstName:n.value,lastName:t.value,email:i.value,contactOptionId:o.value,zipCode:a.value,phone:s.value},1)},this.submitFormData=function(n,t){return i(e,void 0,void 0,(function(){var e,i,s;return o(this,(function(o){switch(o.label){case 0:console.log("step-".concat(t,"-data="),n),e=new FormData,1===t?(e.append("firstName",n.firstName),e.append("lastName",n.lastName),e.append("email",n.email),e.append("contactOptionId",n.contactOptionId),e.append("zipCode",n.zipCode),e.append("phone",n.phone)):(e.append("AddressLine1",n.addressLine1),e.append("AddressLine2",n.addressLine2),e.append("City",n.city),e.append("State",n.state)),o.label=1;case 1:return o.trys.push([1,6,,7]),[4,fetch("https://www.sunsetter.com/api/PostHomePageCI",{method:"POST",body:e})];case 2:return(i=o.sent()).ok?[4,i.json()]:[3,4];case 3:return o.sent(),1===t&&this.formComponent&&this.formComponent.classList.add("next-step"),2===t&&this.formComponent&&this.formComponent.classList.add("submitted"),1===t&&(0,a.triggerEvent)("step-one-form-submitted"),2===t&&(0,a.triggerEvent)("step-two-form-submitted"),console.log("success=",i),[3,5];case 4:console.log("error=",i),this.hideAndShowErrorMsg(),o.label=5;case 5:return[3,7];case 6:return s=o.sent(),console.log("error=",s),this.hideAndShowErrorMsg(),[3,7];case 7:return[2]}}))}))},this.hideAndShowErrorMsg=function(){e.errorMsg&&e.errorMsg.classList.add("show"),setTimeout((function(){e.errorMsg&&e.errorMsg.classList.remove("show")}),5e3)}}},221:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.MainComponent=void 0;var i=t(951),o=t(446),a=t(523),s=t(496),r=t(906),l=t(175);n.MainComponent=function(){var e=this;this.carouselComponent=new r.CarouselComponent,this.formComponent=new l.FormComponent,this.getHeroImageHtml=function(e,n){return'<img class="'.concat(0===n?"active":"",' hero-image" src="').concat(e,'" alt="hero-image" >').trim()},this.getHtml=function(){return'\n      <div class="main-component" >\n        <div class="component-wrap" >\n          <div class="extra-wrap" >\n            <div class="hero-component" >\n              <div class="component-wrap" >\n                <div class="img" >\n                  '.concat(o.heroImageLinks.map((function(n,t){return e.getHeroImageHtml(n,t)})).join("\n"),'\n                </div>\n                <div class="hero-overlay" >\n                  <div class="overlay-wrap" >\n                    <div class="overlay-text" >\n                      <h2 class="step-one" >Transform Your Outdoor Space with SunSetter</h2>\n                      <h2 class="step-two" >Elevate Your Outdoor Space with SunSetter Awnings</h2>\n                    </div>\n                    <div class="overlay-cta" >\n                      <a class="price" href="" >Get Pricing</a>\n                      <a class="dealer" href="" >Find a Dealer</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              ').concat(e.carouselComponent.getHtml(o.imgLinks),"\n            </div>\n            ").concat(e.formComponent.getHtml(),"\n          </div>\n        </div>\n      </div>\n    ").trim()},this.init=function(){var n=new s.Loader,t=new s.Loader;n.load(o.swiperLibrary.css,"swiper-css","link").then((function(n){n&&t.load(o.swiperLibrary.js,"swiper-js","script").then((function(t){n&&t&&console.log("Swiper library loaded ......!"),n&&t&&e.applyModification()}))}))},this.applyModification=function(){var n=document.querySelector(o.selectors.header);n&&(n.insertAdjacentHTML("afterend",e.getHtml()),e.carouselComponent.initSwiper(),e.formComponent.active())},i.Initializer.init(a.TestInfo,"0.0.3")}},496:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Loader=void 0;n.Loader=function(){this.load=function(e,n,t){var i=document.createElement(t);return"script"===t?i.setAttribute("src",e):i.setAttribute("href",e),"link"===t&&i.setAttribute("rel","stylesheet"),i.setAttribute("id",n),document.head.appendChild(i),new Promise((function(e,i){setTimeout((function(){var o=document.querySelector("".concat(t,"#")+n);o?e(o):i(null)}),1e3)}))}}},951:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Initializer=void 0;var t=function(){function e(){}return e.init=function(e,n){document.documentElement.classList.add(e.ID),document.documentElement.classList.add("".concat(e.ID,"-").concat(e.VARIATION)),console.info("ID: ".concat(e.ID,", VARIATION: ").concat(e.VARIATION,", VERSION: ").concat(n," is running.....!"))},e}();n.Initializer=t},454:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Poller=void 0;var i=t(704);n.Poller=function(){var e=this;this.options=null,this.timeout=null,this.successfulConditions=[],this.callback=function(){},this.conditionsLength=0,this.poll=function(n,t,o){e.callback=t,e.options=new i.UserOptions,e.conditionsLength=n.length,o&&(e.options=o),e.timeout=e.options.timeout?new Date(e.getNow()+e.options.timeout).getTime():null;for(var a=0;a<n.length;a++)e.pollForCondition(n[a],e.options.wait,!0,e.options.multiplier)},this.getNow=function(){return(new Date).getTime()},this.isTimeOut=function(){return!!(e.timeout&&e.getNow()>e.timeout)},this.evaluateCondition=function(e){return!!e&&("function"==typeof e?e():!("string"!=typeof e||!document.querySelector(e)))},this.isAllConditionPassed=function(){return e.conditionsLength===e.successfulConditions.length},this.pollForCondition=function(n,t,i,o){if(e.timeout&&e.isTimeOut())return!1;var a=e.evaluateCondition(n);return a?(e.successfulConditions.push(a),e.isAllConditionPassed()&&e.callback(e.successfulConditions)):setTimeout((function(){e.pollForCondition(n,t*o,i,o)}),i?0:t),!0}}},704:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.UserOptions=void 0;n.UserOptions=function(){this.wait=50,this.multiplier=1.1,this.timeout=0}}},n={};function t(i){var o=n[i];if(void 0!==o)return o.exports;var a=n[i]={exports:{}};return e[i].call(a.exports,a,a.exports,t),a.exports}(()=>{var e=t(454),n=t(221);if(!/MSIE|Trident|Edge\/(12|13|14|15|16|17|18)/.test(window.navigator.userAgent)){var i=new n.MainComponent;(new e.Poller).poll(["body"],i.init)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFoTixRQUdyQixJQUFJa04sRUFBU0wsRUFBeUJFLEdBQVksQ0FHakQvTSxRQUFTLENBQUMsR0FPWCxPQUhBbU4sRUFBb0JKLEdBQVVuRyxLQUFLc0csRUFBT2xOLFFBQVNrTixFQUFRQSxFQUFPbE4sUUFBUzhNLEdBR3BFSSxFQUFPbE4sT0FDZixDLE1DcEJBLElBQUlvTixFQUFXLEVBQVEsS0FDbkJDLEVBQW1CLEVBQVEsS0FFL0IsSUFEZSw0Q0FBNENDLEtBQUt2TSxPQUFPd00sVUFBVUMsV0FDbEUsQ0FDWCxJQUFJQyxFQUFPLElBQUlKLEVBQWlCbEUsZUFDbkIsSUFBSWlFLEVBQVMvQixRQUNuQk8sS0FBSyxDQUFDLFFBQVM2QixFQUFLOUQsS0FDL0IsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FiLXRlc3QtdHMtY2xpLy4vc3JjL2NsaWVudHMvYnJhaW5sYWIvc3Vuc2V0dGVyL1NTMDA3L2NvbW1vbi9hc3NldC50cyIsIndlYnBhY2s6Ly9hYi10ZXN0LXRzLWNsaS8uL3NyYy9jbGllbnRzL2JyYWlubGFiL3N1bnNldHRlci9TUzAwNy9jb21tb24vdGVzdC5pbmZvLnRzIiwid2VicGFjazovL2FiLXRlc3QtdHMtY2xpLy4vc3JjL2NsaWVudHMvYnJhaW5sYWIvc3Vuc2V0dGVyL1NTMDA3L2NvbXBvbmVudHMvY2Fyb3VzZWwuY29tcG9uZW50LnRzIiwid2VicGFjazovL2FiLXRlc3QtdHMtY2xpLy4vc3JjL2NsaWVudHMvYnJhaW5sYWIvc3Vuc2V0dGVyL1NTMDA3L2NvbXBvbmVudHMvZm9ybS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vYWItdGVzdC10cy1jbGkvLi9zcmMvY2xpZW50cy9icmFpbmxhYi9zdW5zZXR0ZXIvU1MwMDcvY29tcG9uZW50cy9tYWluLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9hYi10ZXN0LXRzLWNsaS8uL3NyYy9jbGllbnRzL2JyYWlubGFiL3N1bnNldHRlci9TUzAwNy9sb2FkZXJzL2xvYWRlci50cyIsIndlYnBhY2s6Ly9hYi10ZXN0LXRzLWNsaS8uL3NyYy91dGlsaXRpZXMvaW5pdGlhbGl6ZXIudHMiLCJ3ZWJwYWNrOi8vYWItdGVzdC10cy1jbGkvLi9zcmMvdXRpbGl0aWVzL3BvbGxlci50cyIsIndlYnBhY2s6Ly9hYi10ZXN0LXRzLWNsaS8uL3NyYy91dGlsaXRpZXMvdXNlci5vcHRpb25zLnRzIiwid2VicGFjazovL2FiLXRlc3QtdHMtY2xpL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2FiLXRlc3QtdHMtY2xpLy4vc3JjL2NsaWVudHMvYnJhaW5sYWIvc3Vuc2V0dGVyL1NTMDA3L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZW1haWxSZWd1bGFyRXhwcmVzc2lvbiA9IGV4cG9ydHMuc2tpcEZvck5vd0xpbmsgPSBleHBvcnRzLmhlcm9JbWFnZUxpbmtzID0gZXhwb3J0cy5jaXRpZXMgPSBleHBvcnRzLmltZ0xpbmtzID0gZXhwb3J0cy5zd2lwZXJMaWJyYXJ5ID0gZXhwb3J0cy50cmlnZ2VyRXZlbnQgPSBleHBvcnRzLmxlZnRBcnJvd1N2ZyA9IGV4cG9ydHMucmlnaHRBcnJvd1N2ZyA9IGV4cG9ydHMuc2VsZWN0b3JzID0gdm9pZCAwO1xyXG5leHBvcnRzLnNlbGVjdG9ycyA9IHtcclxuICAgIGhlcm86IFwibWFpbiNjb250ZW50PmRpdjpmaXJzdC1jaGlsZD5kaXY6Zmlyc3QtY2hpbGRcIixcclxuICAgIGhlYWRlcjogXCJoZWFkZXIuaGVhZGVyXCIsXHJcbn07XHJcbmV4cG9ydHMucmlnaHRBcnJvd1N2ZyA9IFwiXFxuPHN2ZyB3aWR0aD1cXFwiMjNcXFwiIGhlaWdodD1cXFwiNDhcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMyA0OFxcXCIgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXG48cGF0aCBkPVxcXCJNMiA0NkwxOC43OTczIDI1LjY2NjVDMjAuMDYyMSAyNC4xMzUzIDIwLjAxMiAyMS45MDggMTguNjc5NiAyMC40MzUzTDIgMlxcXCIgc3Ryb2tlPVxcXCIjMDE0MjZBXFxcIiBzdHJva2Utd2lkdGg9XFxcIjVcXFwiLz5cXG48L3N2Zz5cXG5cIjtcclxuZXhwb3J0cy5sZWZ0QXJyb3dTdmcgPSBcIlxcbjxzdmcgd2lkdGg9XFxcIjIzXFxcIiBoZWlnaHQ9XFxcIjQ4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjMgNDhcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxuPHBhdGggZD1cXFwiTTIxIDJMNC4yMDI3NCAyMi4zMzM1QzIuOTM3ODggMjMuODY0NyAyLjk4Nzk5IDI2LjA5MiA0LjMyMDQ1IDI3LjU2NDdMMjEgNDZcXFwiIHN0cm9rZT1cXFwiIzAxNDI2QVxcXCIgc3Ryb2tlLXdpZHRoPVxcXCI1XFxcIi8+XFxuPC9zdmc+XFxuXCI7XHJcbnZhciB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbiAoYXBpTmFtZSkge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICB3aW5kb3dbXCJvcHRpbWl6ZWx5XCJdID0gd2luZG93W1wib3B0aW1pemVseVwiXSB8fCBbXTtcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgd2luZG93W1wib3B0aW1pemVseVwiXS5wdXNoKHtcclxuICAgICAgICB0eXBlOiBcImV2ZW50XCIsXHJcbiAgICAgICAgZXZlbnROYW1lOiBhcGlOYW1lLFxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZyhcImV2ZW50LXRyaWdnZXJlZD1cIiwgYXBpTmFtZSk7XHJcbn07XHJcbmV4cG9ydHMudHJpZ2dlckV2ZW50ID0gdHJpZ2dlckV2ZW50O1xyXG5leHBvcnRzLnN3aXBlckxpYnJhcnkgPSB7XHJcbiAgICBqczogXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3N3aXBlckAxMS9zd2lwZXItYnVuZGxlLm1pbi5qc1wiLFxyXG4gICAgY3NzOiBcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc3dpcGVyQDExL3N3aXBlci1idW5kbGUubWluLmNzc1wiLFxyXG59O1xyXG5leHBvcnRzLmltZ0xpbmtzID0gW1xyXG4gICAge1xyXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9icmFpbmxhYnMuZGlnaXRhbC9jcm8vc3Vuc2V0dGVyL3NzMDA3LzEuanBnXCIsXHJcbiAgICAgICAgc2VyaWFsOiAwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBsaW5rOiBcImh0dHBzOi8vYnJhaW5sYWJzLmRpZ2l0YWwvY3JvL3N1bnNldHRlci9zczAwNy8yLmpwZ1wiLFxyXG4gICAgICAgIHNlcmlhbDogMSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbGluazogXCJodHRwczovL2JyYWlubGFicy5kaWdpdGFsL2Nyby9zdW5zZXR0ZXIvc3MwMDcvMy5qcGdcIixcclxuICAgICAgICBzZXJpYWw6IDIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9icmFpbmxhYnMuZGlnaXRhbC9jcm8vc3Vuc2V0dGVyL3NzMDA3LzEuanBnXCIsXHJcbiAgICAgICAgc2VyaWFsOiAwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBsaW5rOiBcImh0dHBzOi8vYnJhaW5sYWJzLmRpZ2l0YWwvY3JvL3N1bnNldHRlci9zczAwNy8yLmpwZ1wiLFxyXG4gICAgICAgIHNlcmlhbDogMSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbGluazogXCJodHRwczovL2JyYWlubGFicy5kaWdpdGFsL2Nyby9zdW5zZXR0ZXIvc3MwMDcvMy5qcGdcIixcclxuICAgICAgICBzZXJpYWw6IDIsXHJcbiAgICB9LFxyXG5dO1xyXG5leHBvcnRzLmNpdGllcyA9IFtcclxuICAgIHsga2V5OiBcIkFMXCIsIHZhbHVlOiBcIkFsYWJhbWFcIiB9LFxyXG4gICAgeyBrZXk6IFwiQVpcIiwgdmFsdWU6IFwiQXJpem9uYVwiIH0sXHJcbiAgICB7IGtleTogXCJBUlwiLCB2YWx1ZTogXCJBcmthbnNhc1wiIH0sXHJcbiAgICB7IGtleTogXCJDQVwiLCB2YWx1ZTogXCJDYWxpZm9ybmlhXCIgfSxcclxuICAgIHsga2V5OiBcIkNPXCIsIHZhbHVlOiBcIkNvbG9yYWRvXCIgfSxcclxuICAgIHsga2V5OiBcIkNUXCIsIHZhbHVlOiBcIkNvbm5lY3RpY3V0XCIgfSxcclxuICAgIHsga2V5OiBcIkRDXCIsIHZhbHVlOiBcIkRpc3RyaWN0IG9mIENvbHVtYmlhXCIgfSxcclxuICAgIHsga2V5OiBcIkRFXCIsIHZhbHVlOiBcIkRlbGF3YXJlXCIgfSxcclxuICAgIHsga2V5OiBcIkZMXCIsIHZhbHVlOiBcIkZsb3JpZGFcIiB9LFxyXG4gICAgeyBrZXk6IFwiR0FcIiwgdmFsdWU6IFwiR2VvcmdpYVwiIH0sXHJcbiAgICB7IGtleTogXCJISVwiLCB2YWx1ZTogXCJIYXdhaWlcIiB9LFxyXG4gICAgeyBrZXk6IFwiSURcIiwgdmFsdWU6IFwiSWRhaG9cIiB9LFxyXG4gICAgeyBrZXk6IFwiSUxcIiwgdmFsdWU6IFwiSWxsaW5vaXNcIiB9LFxyXG4gICAgeyBrZXk6IFwiSU5cIiwgdmFsdWU6IFwiSW5kaWFuYVwiIH0sXHJcbiAgICB7IGtleTogXCJJQVwiLCB2YWx1ZTogXCJJb3dhXCIgfSxcclxuICAgIHsga2V5OiBcIktTXCIsIHZhbHVlOiBcIkthbnNhc1wiIH0sXHJcbiAgICB7IGtleTogXCJLWVwiLCB2YWx1ZTogXCJLZW50dWNreVwiIH0sXHJcbiAgICB7IGtleTogXCJMQVwiLCB2YWx1ZTogXCJMb3Vpc2lhbmFcIiB9LFxyXG4gICAgeyBrZXk6IFwiTUVcIiwgdmFsdWU6IFwiTWFpbmVcIiB9LFxyXG4gICAgeyBrZXk6IFwiTURcIiwgdmFsdWU6IFwiTWFyeWxhbmRcIiB9LFxyXG4gICAgeyBrZXk6IFwiTUFcIiwgdmFsdWU6IFwiTWFzc2FjaHVzZXR0c1wiIH0sXHJcbiAgICB7IGtleTogXCJNSVwiLCB2YWx1ZTogXCJNaWNoaWdhblwiIH0sXHJcbiAgICB7IGtleTogXCJNTlwiLCB2YWx1ZTogXCJNaW5uZXNvdGFcIiB9LFxyXG4gICAgeyBrZXk6IFwiTVNcIiwgdmFsdWU6IFwiTWlzc2lzc2lwcGlcIiB9LFxyXG4gICAgeyBrZXk6IFwiTU9cIiwgdmFsdWU6IFwiTWlzc291cmlcIiB9LFxyXG4gICAgeyBrZXk6IFwiTVRcIiwgdmFsdWU6IFwiTW9udGFuYVwiIH0sXHJcbiAgICB7IGtleTogXCJORVwiLCB2YWx1ZTogXCJOZWJyYXNrYVwiIH0sXHJcbiAgICB7IGtleTogXCJOVlwiLCB2YWx1ZTogXCJOZXZhZGFcIiB9LFxyXG4gICAgeyBrZXk6IFwiTkhcIiwgdmFsdWU6IFwiTmV3IEhhbXBzaGlyZVwiIH0sXHJcbiAgICB7IGtleTogXCJOSlwiLCB2YWx1ZTogXCJOZXcgSmVyc2V5XCIgfSxcclxuICAgIHsga2V5OiBcIk5NXCIsIHZhbHVlOiBcIk5ldyBNZXhpY29cIiB9LFxyXG4gICAgeyBrZXk6IFwiTllcIiwgdmFsdWU6IFwiTmV3IFlvcmtcIiB9LFxyXG4gICAgeyBrZXk6IFwiTkNcIiwgdmFsdWU6IFwiTm9ydGggQ2Fyb2xpbmFcIiB9LFxyXG4gICAgeyBrZXk6IFwiTkRcIiwgdmFsdWU6IFwiTm9ydGggRGFrb3RhXCIgfSxcclxuICAgIHsga2V5OiBcIk9IXCIsIHZhbHVlOiBcIk9oaW9cIiB9LFxyXG4gICAgeyBrZXk6IFwiT0tcIiwgdmFsdWU6IFwiT2tsYWhvbWFcIiB9LFxyXG4gICAgeyBrZXk6IFwiT1JcIiwgdmFsdWU6IFwiT3JlZ29uXCIgfSxcclxuICAgIHsga2V5OiBcIlBBXCIsIHZhbHVlOiBcIlBlbm5zeWx2YW5pYVwiIH0sXHJcbiAgICB7IGtleTogXCJSSVwiLCB2YWx1ZTogXCJSaG9kZSBJc2xhbmRcIiB9LFxyXG4gICAgeyBrZXk6IFwiU0NcIiwgdmFsdWU6IFwiU291dGggQ2Fyb2xpbmFcIiB9LFxyXG4gICAgeyBrZXk6IFwiU0RcIiwgdmFsdWU6IFwiU291dGggRGFrb3RhXCIgfSxcclxuICAgIHsga2V5OiBcIlROXCIsIHZhbHVlOiBcIlRlbm5lc3NlZVwiIH0sXHJcbiAgICB7IGtleTogXCJUWFwiLCB2YWx1ZTogXCJUZXhhc1wiIH0sXHJcbiAgICB7IGtleTogXCJVVFwiLCB2YWx1ZTogXCJVdGFoXCIgfSxcclxuICAgIHsga2V5OiBcIlZUXCIsIHZhbHVlOiBcIlZlcm1vbnRcIiB9LFxyXG4gICAgeyBrZXk6IFwiVkFcIiwgdmFsdWU6IFwiVmlyZ2luaWFcIiB9LFxyXG4gICAgeyBrZXk6IFwiV0FcIiwgdmFsdWU6IFwiV2FzaGluZ3RvblwiIH0sXHJcbiAgICB7IGtleTogXCJXVlwiLCB2YWx1ZTogXCJXZXN0IFZpcmdpbmlhXCIgfSxcclxuICAgIHsga2V5OiBcIldJXCIsIHZhbHVlOiBcIldpc2NvbnNpblwiIH0sXHJcbiAgICB7IGtleTogXCJXWVwiLCB2YWx1ZTogXCJXeW9taW5nXCIgfSxcclxuXTtcclxuZXhwb3J0cy5oZXJvSW1hZ2VMaW5rcyA9IFtcclxuICAgIFwiaHR0cHM6Ly9icmFpbmxhYnMuZGlnaXRhbC9jcm8vc3Vuc2V0dGVyL3NzMDA3L2hlcm8taW1nLTEuanBnXCIsXHJcbiAgICBcImh0dHBzOi8vYnJhaW5sYWJzLmRpZ2l0YWwvY3JvL3N1bnNldHRlci9zczAwNy9oZXJvLWltZy0yLmpwZ1wiLFxyXG4gICAgXCJodHRwczovL2JyYWlubGFicy5kaWdpdGFsL2Nyby9zdW5zZXR0ZXIvc3MwMDcvaGVyby1pbWctMy5qcGdcIixcclxuXTtcclxuZXhwb3J0cy5za2lwRm9yTm93TGluayA9IFwiaHR0cHM6Ly93d3cuc3Vuc2V0dGVyLmNvbS9jbS9maW5kLWEtZGVhbGVyL3Jlc3VsdHNcIjtcclxuZXhwb3J0cy5lbWFpbFJlZ3VsYXJFeHByZXNzaW9uID0gXCJeKChbXjw+KClbXVxcXFwuLDs6c0BAJnF1b3Q7XSsoLltePD4oKVtdXFxcXC4sOzpzQEAmcXVvdDtdKykqKXwoJnF1b3Q7LismcXVvdDspKUAoKFtbMC05XXsxLDN9LlswLTldezEsM30uWzAtOV17MSwzfS5bMC05XXsxLDN9XSl8KChbYS16QS1aLTAtOV0rLikrW2EtekEtWl17Mix9KSkkXCI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVGVzdEluZm8gPSB2b2lkIDA7XHJcbnZhciBUZXN0SW5mbztcclxuKGZ1bmN0aW9uIChUZXN0SW5mbykge1xyXG4gICAgVGVzdEluZm9bXCJJRFwiXSA9IFwiU1MwMDdcIjtcclxuICAgIFRlc3RJbmZvW1wiU0lURVwiXSA9IFwic3Vuc2V0dGVyXCI7XHJcbiAgICBUZXN0SW5mb1tcIlRJVExFXCJdID0gXCIzLjUgRm9ybSBvbiBIb21lcGFnZVwiO1xyXG4gICAgVGVzdEluZm9bXCJDTElFTlRcIl0gPSBcImJyYWlubGFiXCI7XHJcbiAgICBUZXN0SW5mb1tcIlRBUkdFVFwiXSA9IFwiaHR0cHM6Ly93d3cuc3Vuc2V0dGVyLmNvbVwiO1xyXG4gICAgVGVzdEluZm9bXCJWQVJJQVRJT05cIl0gPSBcIjFcIjtcclxufSkoVGVzdEluZm8gPSBleHBvcnRzLlRlc3RJbmZvIHx8IChleHBvcnRzLlRlc3RJbmZvID0ge30pKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5DYXJvdXNlbENvbXBvbmVudCA9IHZvaWQgMDtcclxudmFyIGFzc2V0XzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2Fzc2V0XCIpO1xyXG52YXIgQ2Fyb3VzZWxDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDYXJvdXNlbENvbXBvbmVudCgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0U3dpcGVyU2xpZGVIdG1sID0gZnVuY3Rpb24gKGltZ0xpbmssIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVDbGFzcyA9IGluZGV4ID09PSAwID8gXCJhY3RpdmVcIiA6IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBodG1sU3RyaW5nID0gXCJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUgY2Fyb3VzZWwtaXRlbS1cIi5jb25jYXQoaW5kZXgsIFwiXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImltYWdlLWNhcmQgXCIpLmNvbmNhdChhY3RpdmVDbGFzcywgXCJcXFwiIHNlcmlhbD1cXFwiXCIpLmNvbmNhdChpbWdMaW5rLnNlcmlhbCwgXCJcXFwiID5cXG4gICAgICAgICAgPGltZyBzcmM9XFxcIlwiKS5jb25jYXQoaW1nTGluay5saW5rLCBcIlxcXCIgPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWxTdHJpbmcudHJpbSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRIdG1sID0gZnVuY3Rpb24gKGltZ0xpbmtzKSB7XHJcbiAgICAgICAgICAgIHZhciBodG1sU3RyaW5nID0gXCJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1jb21wb25lbnRcXFwiID5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbXBvbmVudC13cmFwXFxcIiA+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInN3aXBlciBjYXJvdXNlbFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3dpcGVyLXdyYXBwZXJcXFwiPlxcbiAgICAgICAgICAgIFwiLmNvbmNhdChpbWdMaW5rc1xyXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaW1nTGluaywgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRTd2lwZXJTbGlkZUh0bWwoaW1nTGluaywgaW5kZXgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5cIiksIFwiXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1jb250cm9sbGVyXFxcIiA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtcHJldlxcXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzdmdcXFwiID5cXG4gICAgICAgICAgICAgICAgXCIpLmNvbmNhdChhc3NldF8xLmxlZnRBcnJvd1N2ZywgXCJcXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcm91c2VsLW5leHRcXFwiPlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3ZnXFxcIiA+XFxuICAgICAgICAgICAgICAgIFwiKS5jb25jYXQoYXNzZXRfMS5yaWdodEFycm93U3ZnLCBcIlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWxTdHJpbmcudHJpbSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pbml0U3dpcGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgU3dpcGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzd2lwZXIgPSBfdGhpcy5yZWFjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTd2lwZXIgaW5pdGlhbGl6ZS4uIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmluaXRTd2lwZXIoKTtcclxuICAgICAgICAgICAgICAgIH0sIDI1MCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucmVhY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmFkZEltYWdlTGlzdGVuZXIoKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN3aXBlcihcIi5jYXJvdXNlbFwiLCB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAxMCxcclxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0RWw6IFwiLmNhcm91c2VsLW5leHRcIixcclxuICAgICAgICAgICAgICAgICAgICBwcmV2RWw6IFwiLmNhcm91c2VsLXByZXZcIixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWw6IFwiLmNhcm91c2VsLXBhZ2luYXRpb25cIixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAga2V5Ym9hcmQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgIDQyMDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgNzY4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAxMDY2OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBhc3NldF8xLnRyaWdnZXJFdmVudCkoXCJyZXZpZXctc2xpZGUtY2hhbmdlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYWRkSW1hZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGltYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJkaXYuaW1hZ2UtY2FyZFwiKTtcclxuICAgICAgICAgICAgdmFyIGhlcm9JbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nLmhlcm8taW1hZ2VcIik7XHJcbiAgICAgICAgICAgIGlmICghaW1hZ2VzIHx8XHJcbiAgICAgICAgICAgICAgICAhaGVyb0ltYWdlcyB8fFxyXG4gICAgICAgICAgICAgICAgaW1hZ2VzLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgaGVyb0ltYWdlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbWFnZXMuZm9yRWFjaChmdW5jdGlvbiAoaW1nQ2FyZCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGltZ0NhcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVBY3RpdmUoaW1hZ2VzLCBoZXJvSW1hZ2VzKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWdDYXJkLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcmlhbCA9IGltZ0NhcmQuZ2V0QXR0cmlidXRlKFwic2VyaWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbCAmJiBoZXJvSW1hZ2VzW051bWJlcihzZXJpYWwpXS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBY3RpdmUgPSBmdW5jdGlvbiAoaW1hZ2VzLCBoZXJvSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbWdDYXJkLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaW1nQ2FyZC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaGVyb0ltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbWFnZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGltYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ2Fyb3VzZWxDb21wb25lbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ2Fyb3VzZWxDb21wb25lbnQgPSBDYXJvdXNlbENvbXBvbmVudDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Gb3JtQ29tcG9uZW50ID0gdm9pZCAwO1xyXG52YXIgYXNzZXRfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vYXNzZXRcIik7XHJcbnZhciBGb3JtQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRm9ybUNvbXBvbmVudCgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZm9ybUNvbXBvbmVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lcnJvck1zZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5nZXRTdGVwVHdvRm9ybUh0bWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBodG1sU3RyaW5nID0gXCJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjb21wb25lbnQtd3JhcCBzdGVwLXR3b1xcXCIgPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGVhZGxpbmVcXFwiID5cXG4gICAgICAgICAgPGgzPlJlY2VpdmUgYSBGUkVFIEluZm9ybWF0aW9uIEtpdCBhbG9uZyB3aXRoIFNhdmluZ3MhPC9oMz5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZvcm0gY2xhc3M9XFxcImN1c3RvbWVyLWZvcm1cXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1hcmVhXFxcIiA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibmFtZVxcXCIgPlxcbiAgICAgICAgICAgICAgPGxhYmVsPkFkZHJlc3M8L2xhYmVsPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0XFxcIiA+XFxuICAgICAgICAgICAgICA8aW5wdXQgXFxuICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cXFwib25cXFwiIFxcbiAgICAgICAgICAgICAgICBpZD1cXFwiQWRkcmVzc0xpbmUxXFxcIiBcXG4gICAgICAgICAgICAgICAgbWF4bGVuZ3RoPVxcXCI0MFxcXCIgXFxuICAgICAgICAgICAgICAgIG5hbWU9XFxcIkFkZHJlc3NMaW5lMVxcXCIgXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJBZGRyZXNzIDFcXFwiIFxcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJ0ZXh0XFxcIiBcXG4gICAgICAgICAgICAgICAgdmFsdWU9XFxcIlxcXCJcXG4gICAgICAgICAgICAgIHJlcXVpcmVkPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtYXJlYVxcXCIgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm5hbWVcXFwiID5cXG4gICAgICAgICAgICAgIDxsYWJlbD5BZGRyZXNzIDI8L2xhYmVsPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0XFxcIiA+XFxuICAgICAgICAgICAgICA8aW5wdXQgXFxuICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cXFwib25cXFwiIFxcbiAgICAgICAgICAgICAgICBpZD1cXFwiQWRkcmVzc0xpbmUyXFxcIiBcXG4gICAgICAgICAgICAgICAgbWF4bGVuZ3RoPVxcXCI0MFxcXCIgXFxuICAgICAgICAgICAgICAgIG5hbWU9XFxcIkFkZHJlc3NMaW5lMlxcXCIgXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJBZGRyZXNzIDJcXFwiIFxcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJ0ZXh0XFxcIiBcXG4gICAgICAgICAgICAgICAgdmFsdWU9XFxcIlxcXCJcXG4gICAgICAgICAgICAgIHJlcXVpcmVkPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtYXJlYVxcXCIgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm5hbWVcXFwiID5cXG4gICAgICAgICAgICAgIDxsYWJlbD5DaXR5PC9sYWJlbD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dFxcXCIgPlxcbiAgICAgICAgICAgICAgPGlucHV0IFxcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XFxcIm9uXFxcIiBcXG4gICAgICAgICAgICAgICAgaWQ9XFxcIkNpdHlcXFwiIFxcbiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XFxcIjMwXFxcIiBcXG4gICAgICAgICAgICAgICAgbmFtZT1cXFwiQ2l0eVxcXCIgXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJDaXR5XFxcIiBcXG4gICAgICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCIgXFxuICAgICAgICAgICAgICAgIHZhbHVlPVxcXCJcXFwiXFxuICAgICAgICAgICAgICByZXF1aXJlZD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWFyZWFcXFwiID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dFxcXCIgPlxcbiAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwiU3RhdGVcXFwiIG5hbWU9XFxcIlN0YXRlXFxcIiByZXF1aXJlZD5cXG4gICAgICAgICAgICAgICAgPG9wdGlvbiBzZWxlY3RlZD1cXFwic2VsZWN0ZWRcXFwiIHZhbHVlPVxcXCJcXFwiPlNlbGVjdCBTdGF0ZTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICBcIi5jb25jYXQoYXNzZXRfMS5jaXRpZXNcclxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGNpdHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIjxvcHRpb24gdmFsdWU9XFxcIlwiLmNvbmNhdChjaXR5LmtleSwgXCJcXFwiPlwiKS5jb25jYXQoY2l0eS52YWx1ZSwgXCI8L29wdGlvbj5cIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKSwgXCJcXG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3VibWl0LWFyZWFcXFwiID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjdGFcXFwiID5cXG4gICAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcInNob3ctcHJpY2UtYnRuXFxcIiA+RmluZCBhIERlYWxlcjwvYnV0dG9uPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZm9ybT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZm9vdGVyXFxcIiA+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNraXBcXFwiID5cXG4gICAgICAgICAgICA8YSBocmVmPVxcXCJcIikuY29uY2F0KGFzc2V0XzEuc2tpcEZvck5vd0xpbmssIFwiXFxcIiA+U2tpcCBmb3Igbm93PC9hPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9vdGVyLXRleHRcXFwiID5cXG4gICAgICAgICAgICA8cD5Zb3VyIGNvbnRhY3QgaW5mb3JtYXRpb24gaXMga2VwdCBjb25maWRlbnRpYWwuIFdlIGRvIG5vdCBkaXN0cmlidXRlIGl0IHRvIG91dHNpZGUgc291cmNlcy4gUmVhZCBvdXIgPGEgaHJlZj1cXFwiL2NtL3ByaXZhY3kvXFxcIiA+cHJpdmFjeSBwb2xpY3k8L2E+LjwvcD5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gaHRtbFN0cmluZy50cmltKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldFN0ZXBPbmVGb3JtSHRtbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGh0bWxTdHJpbmcgPSBcIlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbXBvbmVudC13cmFwIHN0ZXAtb25lXFxcIiA+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZWFkbGluZVxcXCIgPlxcbiAgICAgICAgICA8aDM+RmluZCBhbiBBdXRob3JpemVkIFN1blNldHRlciBEZWFsZXIgTmVhciBZb3UhPC9oMz5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZvcm0gY2xhc3M9XFxcImN1c3RvbWVyLWZvcm1cXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1hcmVhXFxcIiA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibmFtZVxcXCIgPlxcbiAgICAgICAgICAgICAgPGxhYmVsPkZpcnN0IE5hbWU8L2xhYmVsPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0XFxcIiA+XFxuICAgICAgICAgICAgICA8aW5wdXQgXFxuICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cXFwib25cXFwiIFxcbiAgICAgICAgICAgICAgICBpZD1cXFwiRmlyc3ROYW1lXFxcIiBcXG4gICAgICAgICAgICAgICAgbWF4bGVuZ3RoPVxcXCIzMFxcXCIgXFxuICAgICAgICAgICAgICAgIG5hbWU9XFxcIkZpcnN0TmFtZVxcXCIgXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJGaXJzdCBOYW1lXFxcIiBcXG4gICAgICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCIgXFxuICAgICAgICAgICAgICAgIHZhbHVlPVxcXCJcXFwiXFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1hcmVhXFxcIiA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibmFtZVxcXCIgPlxcbiAgICAgICAgICAgICAgPGxhYmVsPkxhc3QgTmFtZTwvbGFiZWw+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXRcXFwiID5cXG4gICAgICAgICAgICAgIDxpbnB1dCBcXG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVxcXCJvblxcXCIgXFxuICAgICAgICAgICAgICAgIGlkPVxcXCJMYXN0TmFtZVxcXCIgXFxuICAgICAgICAgICAgICAgIG1heGxlbmd0aD1cXFwiMzBcXFwiIFxcbiAgICAgICAgICAgICAgICBuYW1lPVxcXCJMYXN0TmFtZVxcXCIgXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJMYXN0IE5hbWVcXFwiIFxcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJ0ZXh0XFxcIiB2YWx1ZT1cXFwiXFxcIlxcbiAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtYXJlYVxcXCIgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm5hbWVcXFwiID5cXG4gICAgICAgICAgICAgIDxsYWJlbD5FbWFpbDwvbGFiZWw+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXRcXFwiID5cXG4gICAgICAgICAgICAgIDxpbnB1dFxcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XFxcIm9uXFxcIlxcbiAgICAgICAgICAgICAgICBpZD1cXFwiRW1haWxcXFwiIFxcbiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XFxcIjEyOFxcXCIgXFxuICAgICAgICAgICAgICAgIG5hbWU9XFxcIkVtYWlsXFxcIiBcXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XFxcIkVtYWlsXFxcIiBcXG4gICAgICAgICAgICAgICAgdHlwZT1cXFwiZW1haWxcXFwiIHZhbHVlPVxcXCJcXFwiXFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1hcmVhXFxcIiA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2hlY2stYm94XFxcIiA+XFxuICAgICAgICAgICAgICA8aW5wdXQgXFxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9XFxcImNoZWNrZWRcXFwiIFxcbiAgICAgICAgICAgICAgICBpZD1cXFwiQ29udGFjdE9wdGlvbklkXFxcIiBcXG4gICAgICAgICAgICAgICAgbmFtZT1cXFwiQ29udGFjdE9wdGlvbklkXFxcIiBcXG4gICAgICAgICAgICAgICAgdHlwZT1cXFwiY2hlY2tib3hcXFwiIFxcbiAgICAgICAgICAgICAgICB2YWx1ZT1cXFwidHJ1ZVxcXCJcXG4gICAgICAgICAgICAgIHJlcXVpcmVkPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNoZWNrLWJveC1sYWJlbFxcXCIgPlxcbiAgICAgICAgICAgICAgPHA+SSB3b3VsZCBsaWtlIHRvIHJlY2VpdmUgZW1haWxzIHdpdGggc3BlY2lhbCBwcm9tb3Rpb25zIGZyb20gU3VuU2V0dGVyLjwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWFyZWEtdGV4XFxcIiA+XFxuICAgICAgICAgICAgPHA+RW50ZXIgeW91ciBwaG9uZSBudW1iZXIgZm9yIGEgRlJFRSBpbi1ob21lIGNvbnN1bHRhdGlvbjwvcD5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWFyZWFcXFwiID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJuYW1lXFxcIiA+XFxuICAgICAgICAgICAgICA8bGFiZWw+WmlwIENvZGUqPC9sYWJlbD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dFxcXCIgPlxcbiAgICAgICAgICAgICAgPGlucHV0IFxcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XFxcIm9uXFxcIiBcXG4gICAgICAgICAgICAgICAgaWQ9XFxcIlppcENvZGVcXFwiIFxcbiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XFxcIjIwXFxcIiBcXG4gICAgICAgICAgICAgICAgbmFtZT1cXFwiWmlwQ29kZVxcXCIgXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJaaXAgQ29kZVxcXCIgXFxuICAgICAgICAgICAgICAgIHR5cGU9XFxcInRleHRcXFwiIFxcbiAgICAgICAgICAgICAgICB2YWx1ZT1cXFwiXFxcIlxcbiAgICAgICAgICAgICAgcmVxdWlyZWQ+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1hcmVhXFxcIiA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibmFtZVxcXCIgPlxcbiAgICAgICAgICAgICAgPGxhYmVsPlBob25lKjwvbGFiZWw+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXRcXFwiID5cXG4gICAgICAgICAgICAgIDxpbnB1dCBcXG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVxcXCJvblxcXCIgXFxuICAgICAgICAgICAgICAgIGlkPVxcXCJQaG9uZVxcXCIgXFxuICAgICAgICAgICAgICAgIG1heGxlbmd0aD1cXFwiMTI4XFxcIiBcXG4gICAgICAgICAgICAgICAgbmFtZT1cXFwiUGhvbmVcXFwiIFxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cXFwiUGhvbmVcXFwiIFxcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJ0ZXh0XFxcIiBcXG4gICAgICAgICAgICAgICAgdmFsdWU9XFxcIlxcXCJcXG4gICAgICAgICAgICAgIHJlcXVpcmVkPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3VibWl0LWFyZWFcXFwiID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzdWJtaXQtYXJlYS10ZXh0XFxcIiA+XFxuICAgICAgICAgICAgICA8cD48c3Bhbj4qPC9zcGFuPiBSZXF1aXJlZCBGaWVsZHM8L3A+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY3RhXFxcIiA+XFxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVxcXCJ2aWV3LXByaWNlLWJ0blxcXCIgPkZpbmQgYSBEZWFsZXI8L2J1dHRvbj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Zvcm0+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWZvb3RlclxcXCIgPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb290ZXItdGV4dFxcXCIgPlxcbiAgICAgICAgICAgIDxwPllvdXIgY29udGFjdCBpbmZvcm1hdGlvbiBpcyBrZXB0IGNvbmZpZGVudGlhbC4gV2UgZG8gbm90IGRpc3RyaWJ1dGUgaXQgdG8gb3V0c2lkZSBzb3VyY2VzLiBSZWFkIG91ciA8YSBocmVmPVxcXCIvY20vcHJpdmFjeS9cXFwiID5wcml2YWN5IHBvbGljeTwvYT4uPC9wPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICBcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWxTdHJpbmcudHJpbSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRIdG1sID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaHRtbFN0cmluZyA9IFwiXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1jb21wb25lbnRcXFwiID5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImVycm9yLW1zZ1xcXCIgPlxcbiAgICAgICAgICA8cD5Tb21ldGhpbmcgd2VudCB3cm9uZywgcGxlYXNlIHRyeSBhZ2FpbiE8L3A+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFwiLmNvbmNhdChfdGhpcy5nZXRTdGVwT25lRm9ybUh0bWwoKSwgXCJcXG4gICAgICAgIFwiKS5jb25jYXQoX3RoaXMuZ2V0U3RlcFR3b0Zvcm1IdG1sKCksIFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb21wb25lbnQtd3JhcCBzdWNjZXNzXFxcIiA+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInN1Y2Nlc3Mtd3JhcFxcXCIgPlxcbiAgICAgICAgICAgIDxwPkZvcm0gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseSE8cD5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gaHRtbFN0cmluZy50cmltKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZm9ybUNvbXBvbmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuZm9ybS1jb21wb25lbnRcIik7XHJcbiAgICAgICAgICAgIF90aGlzLmVycm9yTXNnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5lcnJvci1tc2dcIik7XHJcbiAgICAgICAgICAgIHZhciBjdXN0b21lckZvcm1TdGVwT25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5mb3JtLWNvbXBvbmVudD5kaXYuY29tcG9uZW50LXdyYXAuc3RlcC1vbmU+Zm9ybVwiKTtcclxuICAgICAgICAgICAgdmFyIGN1c3RvbWVyRm9ybVN0ZXBUd28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2LmZvcm0tY29tcG9uZW50PmRpdi5jb21wb25lbnQtd3JhcC5zdGVwLXR3bz5mb3JtXCIpO1xyXG4gICAgICAgICAgICB2YXIgdmlld1ByaWNlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJ1dHRvbiN2aWV3LXByaWNlLWJ0blwiKTtcclxuICAgICAgICAgICAgdmFyIHNob3dQcmljZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24jc2hvdy1wcmljZS1idG5cIik7XHJcbiAgICAgICAgICAgIGlmICghdmlld1ByaWNlQnRuIHx8XHJcbiAgICAgICAgICAgICAgICAhY3VzdG9tZXJGb3JtU3RlcE9uZSB8fFxyXG4gICAgICAgICAgICAgICAgIXNob3dQcmljZUJ0biB8fFxyXG4gICAgICAgICAgICAgICAgIWN1c3RvbWVyRm9ybVN0ZXBUd28pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXN0b21lckZvcm1TdGVwT25lLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RlcC1vbmUtZm9ybS1wcmV2ZW50LWRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjdXN0b21lckZvcm1TdGVwVHdvLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RlcC10d28tZm9ybS1wcmV2ZW50LWRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2aWV3UHJpY2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN1Ym1pdFN0ZXBPbmVGb3JtKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzaG93UHJpY2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN1Ym1pdFN0ZXBUd29Gb3JtKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdWJtaXRTdGVwVHdvRm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFkZHJlc3NMaW5lMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dCNBZGRyZXNzTGluZTFcIik7XHJcbiAgICAgICAgICAgIHZhciBhZGRyZXNzTGluZTIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQjQWRkcmVzc0xpbmUyXCIpO1xyXG4gICAgICAgICAgICB2YXIgY2l0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dCNDaXR5XCIpO1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic2VsZWN0I1N0YXRlXCIpO1xyXG4gICAgICAgICAgICBpZiAoYWRkcmVzc0xpbmUxICYmXHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzTGluZTEudmFsdWUgJiZcclxuICAgICAgICAgICAgICAgIGFkZHJlc3NMaW5lMiAmJlxyXG4gICAgICAgICAgICAgICAgYWRkcmVzc0xpbmUyLnZhbHVlICYmXHJcbiAgICAgICAgICAgICAgICBjaXR5ICYmXHJcbiAgICAgICAgICAgICAgICBjaXR5LnZhbHVlICYmXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgc3RhdGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN1Ym1pdEZvcm1EYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzTGluZTE6IGFkZHJlc3NMaW5lMS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzTGluZTI6IGFkZHJlc3NMaW5lMi52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaXR5OiBjaXR5LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIH0sIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnN1Ym1pdFN0ZXBPbmVGb3JtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZmlyc3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0I0ZpcnN0TmFtZVwiKTtcclxuICAgICAgICAgICAgdmFyIGxhc3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0I0xhc3ROYW1lXCIpO1xyXG4gICAgICAgICAgICB2YXIgZW1haWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQjRW1haWxcIik7XHJcbiAgICAgICAgICAgIHZhciBjb250YWN0T3B0aW9uSWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQjQ29udGFjdE9wdGlvbklkXCIpO1xyXG4gICAgICAgICAgICB2YXIgemlwQ29kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dCNaaXBDb2RlXCIpO1xyXG4gICAgICAgICAgICB2YXIgcGhvbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQjUGhvbmVcIik7XHJcbiAgICAgICAgICAgIGlmIChmaXJzdE5hbWUgJiZcclxuICAgICAgICAgICAgICAgIGxhc3ROYW1lICYmXHJcbiAgICAgICAgICAgICAgICBjb250YWN0T3B0aW9uSWQgJiZcclxuICAgICAgICAgICAgICAgIGVtYWlsICYmXHJcbiAgICAgICAgICAgICAgICB6aXBDb2RlICYmXHJcbiAgICAgICAgICAgICAgICB6aXBDb2RlLnZhbHVlICYmXHJcbiAgICAgICAgICAgICAgICBwaG9uZSAmJlxyXG4gICAgICAgICAgICAgICAgcGhvbmUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN1Ym1pdEZvcm1EYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IGZpcnN0TmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTogbGFzdE5hbWUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RPcHRpb25JZDogY29udGFjdE9wdGlvbklkLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHppcENvZGU6IHppcENvZGUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHBob25lLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc3VibWl0Rm9ybURhdGEgPSBmdW5jdGlvbiAoZGF0YSwgc3RlcCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZm9ybURhdGEsIHJlc3BvbnNlLCBqc29uLCBlcnJvcl8xO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0ZXAtXCIuY29uY2F0KHN0ZXAsIFwiLWRhdGE9XCIpLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImZpcnN0TmFtZVwiLCBkYXRhLmZpcnN0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJsYXN0TmFtZVwiLCBkYXRhLmxhc3ROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImVtYWlsXCIsIGRhdGEuZW1haWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiY29udGFjdE9wdGlvbklkXCIsIGRhdGEuY29udGFjdE9wdGlvbklkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInppcENvZGVcIiwgZGF0YS56aXBDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInBob25lXCIsIGRhdGEucGhvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiQWRkcmVzc0xpbmUxXCIsIGRhdGEuYWRkcmVzc0xpbmUxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcIkFkZHJlc3NMaW5lMlwiLCBkYXRhLmFkZHJlc3NMaW5lMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJDaXR5XCIsIGRhdGEuY2l0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJTdGF0ZVwiLCBkYXRhLnN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDYsICwgN10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaChcImh0dHBzOi8vd3d3LnN1bnNldHRlci5jb20vYXBpL1Bvc3RIb21lUGFnZUNJXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAganNvbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcCA9PT0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtQ29tcG9uZW50ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1Db21wb25lbnQuY2xhc3NMaXN0LmFkZChcIm5leHQtc3RlcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcCA9PT0gMiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtQ29tcG9uZW50ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1Db21wb25lbnQuY2xhc3NMaXN0LmFkZChcInN1Ym1pdHRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcCA9PT0gMSAmJiAoMCwgYXNzZXRfMS50cmlnZ2VyRXZlbnQpKFwic3RlcC1vbmUtZm9ybS1zdWJtaXR0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAgPT09IDIgJiYgKDAsIGFzc2V0XzEudHJpZ2dlckV2ZW50KShcInN0ZXAtdHdvLWZvcm0tc3VibWl0dGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN1Y2Nlc3M9XCIsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yPVwiLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZUFuZFNob3dFcnJvck1zZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3I9XCIsIGVycm9yXzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVBbmRTaG93RXJyb3JNc2coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pOyB9O1xyXG4gICAgICAgIHRoaXMuaGlkZUFuZFNob3dFcnJvck1zZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZXJyb3JNc2cgJiYgX3RoaXMuZXJyb3JNc2cuY2xhc3NMaXN0LmFkZChcInNob3dcIik7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZXJyb3JNc2cgJiYgX3RoaXMuZXJyb3JNc2cuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgICAgICAgICAgIH0sIDUwMDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRm9ybUNvbXBvbmVudDtcclxufSgpKTtcclxuZXhwb3J0cy5Gb3JtQ29tcG9uZW50ID0gRm9ybUNvbXBvbmVudDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5NYWluQ29tcG9uZW50ID0gdm9pZCAwO1xyXG52YXIgaW5pdGlhbGl6ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi91dGlsaXRpZXMvaW5pdGlhbGl6ZXJcIik7XHJcbnZhciBhc3NldF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9hc3NldFwiKTtcclxudmFyIHRlc3RfaW5mb18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90ZXN0LmluZm9cIik7XHJcbnZhciBsb2FkZXJfMSA9IHJlcXVpcmUoXCIuLi9sb2FkZXJzL2xvYWRlclwiKTtcclxudmFyIGNhcm91c2VsX2NvbXBvbmVudF8xID0gcmVxdWlyZShcIi4vY2Fyb3VzZWwuY29tcG9uZW50XCIpO1xyXG52YXIgZm9ybV9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL2Zvcm0uY29tcG9uZW50XCIpO1xyXG52YXIgTWFpbkNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1haW5Db21wb25lbnQoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNhcm91c2VsQ29tcG9uZW50ID0gbmV3IGNhcm91c2VsX2NvbXBvbmVudF8xLkNhcm91c2VsQ29tcG9uZW50KCk7XHJcbiAgICAgICAgdGhpcy5mb3JtQ29tcG9uZW50ID0gbmV3IGZvcm1fY29tcG9uZW50XzEuRm9ybUNvbXBvbmVudCgpO1xyXG4gICAgICAgIHRoaXMuZ2V0SGVyb0ltYWdlSHRtbCA9IGZ1bmN0aW9uIChpbWdMaW5rLCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0aXZlQ2xhc3MgPSBpbmRleCA9PT0gMCA/IFwiYWN0aXZlXCIgOiBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgaHRtbFN0cmluZyA9IFwiPGltZyBjbGFzcz1cXFwiXCIuY29uY2F0KGFjdGl2ZUNsYXNzLCBcIiBoZXJvLWltYWdlXFxcIiBzcmM9XFxcIlwiKS5jb25jYXQoaW1nTGluaywgXCJcXFwiIGFsdD1cXFwiaGVyby1pbWFnZVxcXCIgPlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWxTdHJpbmcudHJpbSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRIdG1sID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaHRtbFN0cmluZyA9IFwiXFxuICAgICAgPGRpdiBjbGFzcz1cXFwibWFpbi1jb21wb25lbnRcXFwiID5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbXBvbmVudC13cmFwXFxcIiA+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImV4dHJhLXdyYXBcXFwiID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZXJvLWNvbXBvbmVudFxcXCIgPlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29tcG9uZW50LXdyYXBcXFwiID5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW1nXFxcIiA+XFxuICAgICAgICAgICAgICAgICAgXCIuY29uY2F0KGFzc2V0XzEuaGVyb0ltYWdlTGlua3NcclxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGltZ0xpbmssIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0SGVyb0ltYWdlSHRtbChpbWdMaW5rLCBpbmRleCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKSwgXCJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImhlcm8tb3ZlcmxheVxcXCIgPlxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm92ZXJsYXktd3JhcFxcXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwib3ZlcmxheS10ZXh0XFxcIiA+XFxuICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwic3RlcC1vbmVcXFwiID5UcmFuc2Zvcm0gWW91ciBPdXRkb29yIFNwYWNlIHdpdGggU3VuU2V0dGVyPC9oMj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJzdGVwLXR3b1xcXCIgPkVsZXZhdGUgWW91ciBPdXRkb29yIFNwYWNlIHdpdGggU3VuU2V0dGVyIEF3bmluZ3M8L2gyPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJvdmVybGF5LWN0YVxcXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwicHJpY2VcXFwiIGhyZWY9XFxcIlxcXCIgPkdldCBQcmljaW5nPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZGVhbGVyXFxcIiBocmVmPVxcXCJcXFwiID5GaW5kIGEgRGVhbGVyPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICBcIikuY29uY2F0KF90aGlzLmNhcm91c2VsQ29tcG9uZW50LmdldEh0bWwoYXNzZXRfMS5pbWdMaW5rcyksIFwiXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgXCIpLmNvbmNhdChfdGhpcy5mb3JtQ29tcG9uZW50LmdldEh0bWwoKSwgXCJcXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gaHRtbFN0cmluZy50cmltKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjc3NMb2FkZXIgPSBuZXcgbG9hZGVyXzEuTG9hZGVyKCk7XHJcbiAgICAgICAgICAgIHZhciBqc0xvYWRlciA9IG5ldyBsb2FkZXJfMS5Mb2FkZXIoKTtcclxuICAgICAgICAgICAgY3NzTG9hZGVyXHJcbiAgICAgICAgICAgICAgICAubG9hZChhc3NldF8xLnN3aXBlckxpYnJhcnkuY3NzLCBcInN3aXBlci1jc3NcIiwgXCJsaW5rXCIpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY3NzRWxtKSB7XHJcbiAgICAgICAgICAgICAgICBjc3NFbG0gJiZcclxuICAgICAgICAgICAgICAgICAgICBqc0xvYWRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubG9hZChhc3NldF8xLnN3aXBlckxpYnJhcnkuanMsIFwic3dpcGVyLWpzXCIsIFwic2NyaXB0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChqc0VsbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NFbG0gJiYganNFbG0gJiYgY29uc29sZS5sb2coXCJTd2lwZXIgbGlicmFyeSBsb2FkZWQgLi4uLi4uIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzRWxtICYmIGpzRWxtICYmIF90aGlzLmFwcGx5TW9kaWZpY2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hcHBseU1vZGlmaWNhdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGhlYWRlclNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFzc2V0XzEuc2VsZWN0b3JzLmhlYWRlcik7XHJcbiAgICAgICAgICAgIGlmICghaGVhZGVyU2VjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhlYWRlclNlY3Rpb24uaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJlbmRcIiwgX3RoaXMuZ2V0SHRtbCgpKTtcclxuICAgICAgICAgICAgX3RoaXMuY2Fyb3VzZWxDb21wb25lbnQuaW5pdFN3aXBlcigpO1xyXG4gICAgICAgICAgICBfdGhpcy5mb3JtQ29tcG9uZW50LmFjdGl2ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW5pdGlhbGl6ZXJfMS5Jbml0aWFsaXplci5pbml0KHRlc3RfaW5mb18xLlRlc3RJbmZvLCBcIjAuMC4zXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1haW5Db21wb25lbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTWFpbkNvbXBvbmVudCA9IE1haW5Db21wb25lbnQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTG9hZGVyID0gdm9pZCAwO1xyXG52YXIgTG9hZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xyXG4gICAgICAgIHRoaXMubG9hZCA9IGZ1bmN0aW9uIChzcmNMaW5rLCBpZCwgdGFnTmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuICAgICAgICAgICAgdGFnTmFtZSA9PT0gXCJzY3JpcHRcIlxyXG4gICAgICAgICAgICAgICAgPyB0YWcuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyY0xpbmspXHJcbiAgICAgICAgICAgICAgICA6IHRhZy5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHNyY0xpbmspO1xyXG4gICAgICAgICAgICB0YWdOYW1lID09PSBcImxpbmtcIiAmJiB0YWcuc2V0QXR0cmlidXRlKFwicmVsXCIsIFwic3R5bGVzaGVldFwiKTtcclxuICAgICAgICAgICAgdGFnLnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiXCIuY29uY2F0KHRhZ05hbWUsIFwiI1wiKSArIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIExvYWRlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Mb2FkZXIgPSBMb2FkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuSW5pdGlhbGl6ZXIgPSB2b2lkIDA7XHJcbnZhciBJbml0aWFsaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEluaXRpYWxpemVyKCkge1xyXG4gICAgfVxyXG4gICAgSW5pdGlhbGl6ZXIuaW5pdCA9IGZ1bmN0aW9uICh0ZXN0SW5mbywgdmVyc2lvbikge1xyXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRlc3RJbmZvLklEKTtcclxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIlwiLmNvbmNhdCh0ZXN0SW5mby5JRCwgXCItXCIpLmNvbmNhdCh0ZXN0SW5mby5WQVJJQVRJT04pKTtcclxuICAgICAgICBjb25zb2xlLmluZm8oXCJJRDogXCIuY29uY2F0KHRlc3RJbmZvLklELCBcIiwgVkFSSUFUSU9OOiBcIikuY29uY2F0KHRlc3RJbmZvLlZBUklBVElPTiwgXCIsIFZFUlNJT046IFwiKS5jb25jYXQodmVyc2lvbiwgXCIgaXMgcnVubmluZy4uLi4uIVwiKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEluaXRpYWxpemVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkluaXRpYWxpemVyID0gSW5pdGlhbGl6ZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUG9sbGVyID0gdm9pZCAwO1xyXG52YXIgdXNlcl9vcHRpb25zXzEgPSByZXF1aXJlKFwiLi91c2VyLm9wdGlvbnNcIik7XHJcbnZhciBQb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQb2xsZXIoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdWNjZXNzZnVsQ29uZGl0aW9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgdGhpcy5jb25kaXRpb25zTGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLnBvbGwgPSBmdW5jdGlvbiAoY29uZGl0aW9ucywgY2FsbGJhY2ssIHVzZXJPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMgPSBuZXcgdXNlcl9vcHRpb25zXzEuVXNlck9wdGlvbnMoKTtcclxuICAgICAgICAgICAgX3RoaXMuY29uZGl0aW9uc0xlbmd0aCA9IGNvbmRpdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAodXNlck9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9wdGlvbnMgPSB1c2VyT3B0aW9ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gX3RoaXMub3B0aW9ucy50aW1lb3V0XHJcbiAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKF90aGlzLmdldE5vdygpICsgX3RoaXMub3B0aW9ucy50aW1lb3V0KS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25kaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wb2xsRm9yQ29uZGl0aW9uKGNvbmRpdGlvbnNbaV0sIF90aGlzLm9wdGlvbnMud2FpdCwgdHJ1ZSwgX3RoaXMub3B0aW9ucy5tdWx0aXBsaWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXROb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaXNUaW1lT3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMudGltZW91dCAmJiBfdGhpcy5nZXROb3coKSA+IF90aGlzLnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXZhbHVhdGVDb25kaXRpb24gPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICghY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25kaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmRpdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZGl0aW9uID09PSBcInN0cmluZ1wiICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZGl0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pc0FsbENvbmRpdGlvblBhc3NlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNvbmRpdGlvbnNMZW5ndGggPT09IF90aGlzLnN1Y2Nlc3NmdWxDb25kaXRpb25zLmxlbmd0aDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucG9sbEZvckNvbmRpdGlvbiA9IGZ1bmN0aW9uIChjb25kaXRpb24sIHdhaXRUaW1lLCBza2lwV2FpdCwgbXVsdGlwbGllcikge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMudGltZW91dCAmJiBfdGhpcy5pc1RpbWVPdXQoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBfdGhpcy5ldmFsdWF0ZUNvbmRpdGlvbihjb25kaXRpb24pO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zdWNjZXNzZnVsQ29uZGl0aW9ucy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNBbGxDb25kaXRpb25QYXNzZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNhbGxiYWNrKF90aGlzLnN1Y2Nlc3NmdWxDb25kaXRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBvbGxGb3JDb25kaXRpb24oY29uZGl0aW9uLCB3YWl0VGltZSAqIG11bHRpcGxpZXIsIHNraXBXYWl0LCBtdWx0aXBsaWVyKTtcclxuICAgICAgICAgICAgICAgIH0sIHNraXBXYWl0ID8gMCA6IHdhaXRUaW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFBvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Qb2xsZXIgPSBQb2xsZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVXNlck9wdGlvbnMgPSB2b2lkIDA7XHJcbnZhciBVc2VyT3B0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFVzZXJPcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMud2FpdCA9IDUwO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGllciA9IDEuMTtcclxuICAgICAgICB0aGlzLnRpbWVvdXQgPSAwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFVzZXJPcHRpb25zO1xyXG59KCkpO1xyXG5leHBvcnRzLlVzZXJPcHRpb25zID0gVXNlck9wdGlvbnM7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgcG9sbGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdXRpbGl0aWVzL3BvbGxlclwiKTtcclxudmFyIG1haW5fY29tcG9uZW50XzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL21haW4uY29tcG9uZW50XCIpO1xyXG52YXIgaWVDaGVja3MgPSAvTVNJRXxUcmlkZW50fEVkZ2VcXC8oMTJ8MTN8MTR8MTV8MTZ8MTd8MTgpLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcclxuaWYgKCFpZUNoZWNrcykge1xyXG4gICAgdmFyIG1haW4gPSBuZXcgbWFpbl9jb21wb25lbnRfMS5NYWluQ29tcG9uZW50KCk7XHJcbiAgICB2YXIgcG9sbGVyID0gbmV3IHBvbGxlcl8xLlBvbGxlcigpO1xyXG4gICAgcG9sbGVyLnBvbGwoW1wiYm9keVwiXSwgbWFpbi5pbml0KTtcclxufVxyXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbWFpbFJlZ3VsYXJFeHByZXNzaW9uIiwic2tpcEZvck5vd0xpbmsiLCJoZXJvSW1hZ2VMaW5rcyIsImNpdGllcyIsImltZ0xpbmtzIiwic3dpcGVyTGlicmFyeSIsInRyaWdnZXJFdmVudCIsImxlZnRBcnJvd1N2ZyIsInJpZ2h0QXJyb3dTdmciLCJzZWxlY3RvcnMiLCJoZXJvIiwiaGVhZGVyIiwiYXBpTmFtZSIsIndpbmRvdyIsInB1c2giLCJ0eXBlIiwiZXZlbnROYW1lIiwiY29uc29sZSIsImxvZyIsImpzIiwiY3NzIiwibGluayIsInNlcmlhbCIsImtleSIsIlRlc3RJbmZvIiwiQ2Fyb3VzZWxDb21wb25lbnQiLCJhc3NldF8xIiwiX3RoaXMiLCJ0aGlzIiwiZ2V0U3dpcGVyU2xpZGVIdG1sIiwiaW1nTGluayIsImluZGV4IiwiYWN0aXZlQ2xhc3MiLCJjb25jYXQiLCJ0cmltIiwiZ2V0SHRtbCIsIm1hcCIsImpvaW4iLCJpbml0U3dpcGVyIiwiU3dpcGVyIiwicmVhY3RpdmUiLCJzZXRUaW1lb3V0IiwiYWRkSW1hZ2VMaXN0ZW5lciIsInNsaWRlc1BlclZpZXciLCJzcGFjZUJldHdlZW4iLCJhdXRvcGxheSIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJwYWdpbmF0aW9uIiwiZWwiLCJtb3VzZXdoZWVsIiwia2V5Ym9hcmQiLCJicmVha3BvaW50cyIsIm9uIiwic2xpZGVDaGFuZ2UiLCJpbWFnZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoZXJvSW1hZ2VzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImltZ0NhcmQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlQWN0aXZlIiwiY2xhc3NMaXN0IiwiYWRkIiwiZ2V0QXR0cmlidXRlIiwiTnVtYmVyIiwicmVtb3ZlIiwiaW1hZ2UiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJjYWxsIiwicG9wIiwiRm9ybUNvbXBvbmVudCIsImZvcm1Db21wb25lbnQiLCJlcnJvck1zZyIsImdldFN0ZXBUd29Gb3JtSHRtbCIsImNpdHkiLCJnZXRTdGVwT25lRm9ybUh0bWwiLCJhY3RpdmUiLCJxdWVyeVNlbGVjdG9yIiwiY3VzdG9tZXJGb3JtU3RlcE9uZSIsImN1c3RvbWVyRm9ybVN0ZXBUd28iLCJ2aWV3UHJpY2VCdG4iLCJzaG93UHJpY2VCdG4iLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdFN0ZXBPbmVGb3JtIiwic3VibWl0U3RlcFR3b0Zvcm0iLCJhZGRyZXNzTGluZTEiLCJhZGRyZXNzTGluZTIiLCJzdGF0ZSIsInN1Ym1pdEZvcm1EYXRhIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJlbWFpbCIsImNvbnRhY3RPcHRpb25JZCIsInppcENvZGUiLCJwaG9uZSIsImRhdGEiLCJmb3JtRGF0YSIsInJlc3BvbnNlIiwiZXJyb3JfMSIsIl9hIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJmZXRjaCIsIm1ldGhvZCIsIm9rIiwianNvbiIsImhpZGVBbmRTaG93RXJyb3JNc2ciLCJNYWluQ29tcG9uZW50IiwiaW5pdGlhbGl6ZXJfMSIsInRlc3RfaW5mb18xIiwibG9hZGVyXzEiLCJjYXJvdXNlbF9jb21wb25lbnRfMSIsImZvcm1fY29tcG9uZW50XzEiLCJjYXJvdXNlbENvbXBvbmVudCIsImdldEhlcm9JbWFnZUh0bWwiLCJpbml0IiwiY3NzTG9hZGVyIiwiTG9hZGVyIiwianNMb2FkZXIiLCJsb2FkIiwiY3NzRWxtIiwianNFbG0iLCJhcHBseU1vZGlmaWNhdGlvbiIsImhlYWRlclNlY3Rpb24iLCJpbnNlcnRBZGphY2VudEhUTUwiLCJJbml0aWFsaXplciIsInNyY0xpbmsiLCJpZCIsInRhZ05hbWUiLCJ0YWciLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsInRlc3RJbmZvIiwidmVyc2lvbiIsImRvY3VtZW50RWxlbWVudCIsIklEIiwiVkFSSUFUSU9OIiwiaW5mbyIsIlBvbGxlciIsInVzZXJfb3B0aW9uc18xIiwib3B0aW9ucyIsInRpbWVvdXQiLCJzdWNjZXNzZnVsQ29uZGl0aW9ucyIsImNhbGxiYWNrIiwiY29uZGl0aW9uc0xlbmd0aCIsInBvbGwiLCJjb25kaXRpb25zIiwidXNlck9wdGlvbnMiLCJVc2VyT3B0aW9ucyIsIkRhdGUiLCJnZXROb3ciLCJnZXRUaW1lIiwiaSIsInBvbGxGb3JDb25kaXRpb24iLCJ3YWl0IiwibXVsdGlwbGllciIsImlzVGltZU91dCIsImV2YWx1YXRlQ29uZGl0aW9uIiwiY29uZGl0aW9uIiwiaXNBbGxDb25kaXRpb25QYXNzZWQiLCJ3YWl0VGltZSIsInNraXBXYWl0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInBvbGxlcl8xIiwibWFpbl9jb21wb25lbnRfMSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==