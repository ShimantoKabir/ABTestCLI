(()=>{"use strict";var o={334:(o,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.contactUsMail=e.f5NoticeUrl=e.triggerMetrics=e.formInfo=e.closeIconSvg=e.footerImage=e.capImageUrl=e.formSteps=e.mboxNames=e.footerMktoForms2=e.capMktoForms2=e.heroMktoForms2=e.scriptLink=e.selectors=void 0,e.selectors={heroSection:"div.c01.aem-GridColumn.aem-GridColumn--default--12",heroFromNthRow:"form.mktoForm.hero>div:nth-child",capFromNthRow:"form.mktoForm.cap>div:nth-child",capNameEmailPhoneError:"form.mktoForm.cap>div:nth-child(4) div.mktoError, form.mktoForm.cap>div:nth-child(3) div.mktoError",heroNameEmailPhoneError:"form.mktoForm.hero>div:nth-child(3) div.mktoError, form.mktoForm.hero>div:nth-child(2) div.mktoError",capabilitiesSection:"div#capabilities",footer:"div[data-component-title='Footer']"},e.scriptLink="https://interact.f5.com/js/forms2/js/forms2.min.js",e.heroMktoForms2={domain:"https://interact.f5.com",munchkinId:"653-SMC-783",formId:23747},e.capMktoForms2={domain:"https://interact.f5.com",munchkinId:"653-SMC-783",formId:15271},e.footerMktoForms2={domain:"https://interact.f5.com",munchkinId:"653-SMC-783",formId:7652},e.mboxNames={topFormSubmitted:"top-form-submitted",middleFormSubmitted:"middle-form-submitted",middleFormShowedUp:"middle-form-showed-up",bottomFormSubmitted:"bottom-form-submitted"},e.formSteps=[{progressIcon:'\n    <svg width="357" height="8" viewBox="0 0 357 8" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <path d="M0 2.81967C0 1.26241 1.26241 0 2.81967 0H178.5V7.31203H2.81967C1.26241 7.31203 0 6.04962 0 4.49236V2.81967Z" fill="#138A3B"/>\n      <path d="M178.676 0.17623H354.18C355.64 0.17623 356.824 1.35974 356.824 2.81967V4.49236C356.824 5.95229 355.64 7.1358 354.18 7.1358H178.676V0.17623Z" stroke="#138A3B" stroke-width="0.352459"/>\n    </svg>\n    ',text:"Step 1 of 2"},{progressIcon:'\n    <svg width="358" height="8" viewBox="0 0 358 8" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <path d="M0.84375 2.81967C0.84375 1.53855 1.8823 0.5 3.16342 0.5H178.344V6.81203H3.16342C1.8823 6.81203 0.84375 5.77348 0.84375 4.49236V2.81967Z" stroke="#138A3B"/>\n      <path d="M179.02 0.17623H354.524C355.984 0.17623 357.168 1.35974 357.168 2.81967V4.49236C357.168 5.95229 355.984 7.1358 354.524 7.1358H179.02V0.17623Z" fill="#138A3B"/>\n      <path d="M179.02 0.17623H354.524C355.984 0.17623 357.168 1.35974 357.168 2.81967V4.49236C357.168 5.95229 355.984 7.1358 354.524 7.1358H179.02V0.17623Z" stroke="#138A3B" stroke-width="0.352459"/>\n    </svg>\n    ',text:"Step 2 of 2"}],e.capImageUrl="https://brainlabs.digital/cro/f5/f5024/cap-form-img.jpg",e.footerImage="https://brainlabs.digital/cro/f5/f5024/footer.jpg",e.closeIconSvg='\n  <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">\n    <path d="M21 7L7 21" stroke="#595858" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n    <path d="M7 7L21 21" stroke="#595858" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n  </svg>\n',e.formInfo={cap:{title:"Download the free eBook",description:"Web Application Firewalls for dummies",id:"cap",formId:e.capMktoForms2.formId},hero:{title:"Secure Your API Today",description:"",id:"hero",formId:e.heroMktoForms2.formId}},e.triggerMetrics=function(o){console.log("mbox=",o),adobe&&adobe.target&&adobe.target.trackEvent({mbox:o})},e.f5NoticeUrl="https://www.f5.com/company/policies/privacy-notice",e.contactUsMail="thef5team@f5.com"},970:(o,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;e.Loader=function(){this.load=function(o,e,t){var n=document.createElement(t);return n.setAttribute("src",o),n.setAttribute("id",e),document.head.insertAdjacentElement("afterbegin",n),new Promise((function(o,t){setTimeout((function(){var n=document.querySelector("script#"+e);n?o(n):t(null)}),1e3)}))}}},234:(o,e)=>{var t;Object.defineProperty(e,"__esModule",{value:!0}),e.TestInfo=void 0,(t=e.TestInfo||(e.TestInfo={})).ID="F5024",t.SITE="f5",t.TITLE="LPTEST1.1 - Non Gated",t.CLIENT="brainlab",t.TARGET="https://www.f5.com/products/distributed-cloud-services/api-security",t.VARIATION="1"},60:(o,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CapComponent=void 0;var n=t(334),r=t(900);e.CapComponent=function(){var o=this;this.heroFormComponent=new r.HeroFormComponent,this.getHtml=function(){return'\n      <div class="cap-component hide" >\n        <div class="component-wrap" >\n          <div class="wrap-container" >\n            <div class="cap-left" >\n              <div class="poster" >\n                <div class="content" >\n                  <div class="title" >\n                    <h3>Discover Essential API Security Strategies</h3>\n                  </div>\n                  <div class="description" >\n                    <p>Learn how to protect your APIs from evolving threats with our comprehensive guide.</p>\n                  </div>\n                </div>\n                <div class="image" >\n                  <img src="'.concat(n.capImageUrl,'" >\n                </div>\n              </div>\n            </div>\n            <div class="cap-right" >\n              ').concat(o.heroFormComponent.getHtml("cap-form-component",n.formInfo.cap),'\n            </div>\n          </div>\n          <div class="close-icon" >\n            ').concat(n.closeIconSvg,"\n          </div>\n        </div>\n      </div>\n    ").trim()},this.render=function(){document.body.insertAdjacentHTML("afterbegin",o.getHtml()),o.config()},this.config=function(){var o=document.querySelector("div.close-icon"),e=document.querySelector("div.cap-component");o&&e&&o.addEventListener("click",(function(){e.classList.add("hide")}))},this.configForm=function(){var e=document.querySelector(n.selectors.capFromNthRow+"(4)"),t=document.querySelector(n.selectors.capFromNthRow+"(5)"),r=document.querySelector(n.selectors.capFromNthRow+"(6)");e&&e.classList.add("row-to-col"),t&&t.classList.add("hide"),r&&r.classList.add("hide"),o.configFormActions()},this.configFormActions=function(){var o=document.querySelector("button.next.cap"),e=document.querySelector("button.back.cap"),t=document.querySelector("button.submit.cap"),r=document.querySelector("div.form-progress-container.cap"),i=document.querySelector("div.from-actions.cap"),c=document.querySelector("form.cap button.mktoButton");console.log("cap-original=",c);var s=document.querySelector("div.form-container>form.cap");o&&e&&t&&i&&r&&c&&s&&(o.addEventListener("click",(function(){c.click(),setTimeout((function(){var o=document.querySelectorAll(n.selectors.capNameEmailPhoneError);console.log("error=",o),0===o.length&&(r.classList.add("next"),i.classList.add("next"),s.classList.add("next"))}),100)})),e.addEventListener("click",(function(){r.classList.remove("next"),i.classList.remove("next"),s.classList.remove("next")})),t.addEventListener("click",(function(){c.click(),setTimeout((function(){var o=document.querySelectorAll(n.selectors.capNameEmailPhoneError);console.log("error=",o),0!==o.length&&(r.classList.remove("next"),i.classList.remove("next"),s.classList.remove("next"))}),100)})))}}},306:(o,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FooterFormComponent=void 0;var n=t(334);e.FooterFormComponent=function(){var o=this;this.getHtml=function(){return'\n      <div class="footer-form-component" >\n        <div class="component-wrap" >\n          <div class="component-left" >\n            <div class="banner" >\n              <img src="'.concat(n.footerImage,'" alt="form-banner" />\n            </div>\n          </div>\n          <div class="component-right" >\n            <div class="form-container c28" >\n              <form id="mktoForm_').concat(n.footerMktoForms2.formId,'" class="footer-form" ></form>\n            </div>\n            <div class="form-success" >\n              <p>Form submitted successfully!</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    ').trim()},this.render=function(){var e=document.querySelector(n.selectors.footer);e&&e.insertAdjacentHTML("beforebegin",o.getHtml())},this.getDisclaimerHtml=function(){return'\n      <div class="disclaimer" >\n        <div class="wrap" >\n          <p>Complete the form to download the offer and be contacted about F5 products and services. The information you provide will be treated in accordance with the <a href="'.concat(n.f5NoticeUrl,'" >F5 Privacy Notice.</a></p>\n          <p>Opt-out at anytime, or <a href="mailto:').concat(n.contactUsMail,'" >contact us</a> to download without opting in.</p>\n        </div>\n      </div>\n    ').trim()},this.config=function(){var e=document.querySelector("div.mktoHtmlText>h2"),t=document.querySelector("form.footer-form label#LblFirstName"),n=document.querySelector("form.footer-form label#LblLastName"),r=document.querySelector("form.footer-form label#LblEmail"),i=document.querySelector("form.footer-form label#LblPhone"),c=document.querySelector("form.footer-form label#LblJob_Level__c"),s=document.querySelector("form.footer-form label#LblCompany"),a=document.querySelector("form.footer-form label#LblCountry"),m=document.querySelector("form.footer-form label#Lblf5HowHelp"),d=document.querySelector("form.footer-form div.mktoButtonRow");console.log("firstName=",t),t&&t.insertAdjacentHTML("beforeend","<span>First Name</span>"),n&&n.insertAdjacentHTML("beforeend","<span>Last Name</span>"),r&&r.insertAdjacentHTML("beforeend","<span>Company Email</span>"),i&&i.insertAdjacentHTML("beforeend","<span>Phone Number</span>"),c&&c.insertAdjacentHTML("beforeend","<span>Job Label</span>"),s&&s.insertAdjacentHTML("beforeend","<span>Company Name</span>"),a&&a.insertAdjacentHTML("beforeend","<span>Company Location</span>"),m&&m.insertAdjacentHTML("beforeend","<span>Inquiring About</span>"),e&&d&&(e.textContent="Connect with Our Experts",d.insertAdjacentHTML("beforebegin",o.getDisclaimerHtml()))}}},900:(o,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HeroFormComponent=void 0;var n=t(334);e.HeroFormComponent=function(){var o=this;this.getFormProgressHtml=function(o,e){return'\n      <div class="form-progress" >\n        <div class="progress-text" >\n          <p>'.concat(o.text,'</p>\n        </div>\n        <div class="progress-bar" >\n          ').concat(o.progressIcon,"\n        </div>\n      </div>\n    ").trim()},this.getHtml=function(e,t){var r=t.description?"":"hide";return'\n      <div class="'.concat(e,'" >\n        <div class="component-wrap ').concat(t.id,'" >\n          <div class="form-success" >\n            <p>Form submitted successfully!</p>\n          </div>\n          <div class="form-container" >\n            <div class="form-header" >\n              <div class="form-title" >\n                <h3>').concat(t.title,'</h3>\n              </div>\n              <div class="form-description ').concat(r,'" >\n                <p>').concat(t.description,'</p>\n              </div>\n              <div class="form-progress-container ').concat(t.id,'">\n                ').concat(n.formSteps.map((function(e,t){return o.getFormProgressHtml(e,t)})).join("\n"),'\n              </div>\n            </div>\n            <form \n              id="mktoForm_').concat(t.formId,'" \n              class="').concat(t.id,'" >\n            </form>\n            <div class="form-footer" >\n              <div class="disclaimer" >\n                <p>The information you provide will be treated in accordance with the F5 <a href="').concat(n.f5NoticeUrl,'" >Privacy Notice.</a></p>\n              </div>\n              <div class="from-actions ').concat(t.id,'" >\n                <div class="action-right" >\n                  <button class="back ').concat(t.id,'" >Back</button>\n                </div>\n                <div class="action-left" >\n                  <button class="next ').concat(t.id,'" >Next</button>\n                  <button class="submit ').concat(t.id,'" >Submit</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ')},this.render=function(){var e=document.querySelector(n.selectors.heroSection);e&&e.insertAdjacentHTML("beforeend",o.getHtml("hero-form-component",n.formInfo.hero))},this.configForm=function(){var e=document.querySelector(n.selectors.heroFromNthRow+"(3)"),t=document.querySelector(n.selectors.heroFromNthRow+"(4)"),r=document.querySelector(n.selectors.heroFromNthRow+"(5)");e&&e.classList.add("row-to-col"),t&&t.classList.add("hide"),r&&r.classList.add("hide"),o.configFormActions()},this.configFormActions=function(){var o=document.querySelector("button.next.hero"),e=document.querySelector("button.back.hero"),t=document.querySelector("button.submit.hero"),r=document.querySelector("div.form-progress-container.hero"),i=document.querySelector("div.from-actions.hero"),c=document.querySelector("form.hero button.mktoButton");console.log("hero-original=",c);var s=document.querySelector("div.form-container>form.hero");o&&e&&t&&i&&r&&c&&s&&(o.addEventListener("click",(function(){c.click(),setTimeout((function(){var o=document.querySelectorAll(n.selectors.heroNameEmailPhoneError);console.log("error=",o),0===o.length&&(r.classList.add("next"),i.classList.add("next"),s.classList.add("next"))}),100)})),e.addEventListener("click",(function(){r.classList.remove("next"),i.classList.remove("next"),s.classList.remove("next")})),t.addEventListener("click",(function(){c.click(),setTimeout((function(){var o=document.querySelectorAll(n.selectors.heroNameEmailPhoneError);console.log("error=",o),0!==o.length&&(r.classList.remove("next"),i.classList.remove("next"),s.classList.remove("next"))}),100)})))}}},642:(o,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MainComponent=void 0;var n=t(951),r=t(334),i=t(970),c=t(234),s=t(60),a=t(306),m=t(900);e.MainComponent=function(){var o=this;this.heroFormComponent=new m.HeroFormComponent,this.capComponent=new s.CapComponent,this.footerFormComponent=new a.FooterFormComponent,this.isCapFromSubmitted=!1,this.isFooterFromLoaded=!1,this.loadMktoFormObject=function(){try{console.log("MktoForms2=",MktoForms2),o.loadHeroFrom(),o.loadCapFrom(),o.loadFooterFrom()}catch(e){console.log("error=",e),setTimeout((function(){o.loadMktoFormObject()}),100)}},this.loadHeroFrom=function(){MktoForms2.loadForm(r.heroMktoForms2.domain,r.heroMktoForms2.munchkinId,r.heroMktoForms2.formId).whenReady((function(e){console.log("Hero Form loaded....!"),o.heroFormComponent.configForm(),e.onSuccess((function(o,e){if(o.formVid===r.heroMktoForms2.formId){var t=document.querySelector("div.component-wrap.hero");t&&t.classList.add("submitted"),(0,r.triggerMetrics)(r.mboxNames.topFormSubmitted)}return!1}))}))},this.loadCapFrom=function(){MktoForms2.loadForm(r.capMktoForms2.domain,r.capMktoForms2.munchkinId,r.capMktoForms2.formId).whenReady((function(e){console.log("Cap Form loaded....!"),o.capComponent.configForm(),e.onSuccess((function(e,t){if(e.formVid===r.capMktoForms2.formId){o.isCapFromSubmitted=!0;var n=document.querySelector("div.component-wrap.cap");n&&n.classList.add("submitted"),(0,r.triggerMetrics)(r.mboxNames.middleFormSubmitted)}return!1}))}))},this.loadFooterFrom=function(){MktoForms2.loadForm(r.footerMktoForms2.domain,r.footerMktoForms2.munchkinId,r.footerMktoForms2.formId).whenReady((function(e){console.log("Footer Form loaded....!"),o.isFooterFromLoaded||(o.footerFormComponent.config(),o.isFooterFromLoaded=!0),e.onSuccess((function(o,e){if(o.formVid===r.footerMktoForms2.formId){var t=document.querySelector("div.component-right");t&&t.classList.add("submitted"),(0,r.triggerMetrics)(r.mboxNames.bottomFormSubmitted)}return!1}))}))},this.init=function(){o.heroFormComponent.render(),o.capComponent.render(),o.footerFormComponent.render(),(new i.Loader).load(r.scriptLink,c.TestInfo.ID.toString(),"script").then((function(e){console.log("Form library loaded....!"),o.loadMktoFormObject()})),o.setObserver()},this.setObserver=function(){var e=document.querySelector(r.selectors.capabilitiesSection);e&&new IntersectionObserver((function(e){e.forEach((function(e){if(e.isIntersecting&&e.boundingClientRect.top>0&&!o.isCapFromSubmitted){var t=document.querySelector("div.cap-component");t&&t.classList.remove("hide"),(0,r.triggerMetrics)(r.mboxNames.middleFormShowedUp)}}))})).observe(e)},n.Initializer.init(c.TestInfo,"0.0.1")}},951:(o,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Initializer=void 0;var t=function(){function o(){}return o.init=function(o,e){document.documentElement.classList.add(o.ID),document.documentElement.classList.add("".concat(o.ID,"-").concat(o.VARIATION)),console.info("ID: ".concat(o.ID,", VARIATION: ").concat(o.VARIATION,", VERSION: ").concat(e," is running.....!"))},o}();e.Initializer=t},454:(o,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Poller=void 0;var n=t(704);e.Poller=function(){var o=this;this.options=null,this.timeout=null,this.successfulConditions=[],this.callback=function(){},this.conditionsLength=0,this.poll=function(e,t,r){o.callback=t,o.options=new n.UserOptions,o.conditionsLength=e.length,r&&(o.options=r),o.timeout=o.options.timeout?new Date(o.getNow()+o.options.timeout).getTime():null;for(var i=0;i<e.length;i++)o.pollForCondition(e[i],o.options.wait,!0,o.options.multiplier)},this.getNow=function(){return(new Date).getTime()},this.isTimeOut=function(){return!!(o.timeout&&o.getNow()>o.timeout)},this.evaluateCondition=function(o){return!!o&&("function"==typeof o?o():!("string"!=typeof o||!document.querySelector(o)))},this.isAllConditionPassed=function(){return o.conditionsLength===o.successfulConditions.length},this.pollForCondition=function(e,t,n,r){if(o.timeout&&o.isTimeOut())return!1;var i=o.evaluateCondition(e);return i?(o.successfulConditions.push(i),o.isAllConditionPassed()&&o.callback(o.successfulConditions)):setTimeout((function(){o.pollForCondition(e,t*r,n,r)}),n?0:t),!0}}},704:(o,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.UserOptions=void 0;e.UserOptions=function(){this.wait=50,this.multiplier=1.1,this.timeout=0}}},e={};function t(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return o[n](i,i.exports,t),i.exports}(()=>{var o=t(454),e=t(334),n=t(642);if(!/MSIE|Trident|Edge\/(12|13|14|15|16|17|18)/.test(window.navigator.userAgent)){var r=new n.MainComponent;(new o.Poller).poll(["body",e.selectors.heroSection,e.selectors.footer,e.selectors.capabilitiesSection],r.init)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,